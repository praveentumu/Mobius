//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.261
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.261.
// 
#pragma warning disable 1591

namespace Mobius.Admin.AdminWebService {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ServiceSoap", Namespace="http://tempuri.org/")]
    public partial class Service : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetPatientAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSharedAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSharedWithByIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateUserForDocumentViewOperationCompleted;
        
        private System.Threading.SendOrPostCallback RemoveShareOperationCompleted;
        
        private System.Threading.SendOrPostCallback LoginOperationCompleted;
        
        private System.Threading.SendOrPostCallback LogoutOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSpecificPatientConstentOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePatientConsentInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserMPIIDByUserIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientConstentOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillListBoxOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserGUIDByUserIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCommnIdByPatientIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocIdPostFixOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDocPostFixOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConfigurationUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetConfigurationFacilityInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRootCAKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDistinctUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentFacilityInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUsersGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDefaultPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetDefaultPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExecuteSqlOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUserIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckUniqueSSNOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckValidUserTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFacilityNameOperationCompleted;
        
        private System.Threading.SendOrPostCallback ExportUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportUserListOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchUserInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllRoleInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchRoleInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllPermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssociatePermissionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPermissionCategoryOfAssociatedFacilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCategoryInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetPermissionsAndCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdatePatientConsentPolicyOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchPermissionInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreatePermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllServInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFacilityInfoPublishOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFacilityInfoDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateFacilityInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterServerOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllEicInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback SearchEicInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback RegisterEicOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckPatientConsentPolicyExistenceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteEicOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckRegisterEICOperationCompleted;
        
        private System.Threading.SendOrPostCallback FillDropDownOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFacilityInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatient911XmlOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAssociatedFacilityInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteDocumentByPatientIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSharingByPatientIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback FacilityAssociateOperationCompleted;
        
        private System.Threading.SendOrPostCallback DissociateFacilityOperationCompleted;
        
        private System.Threading.SendOrPostCallback CategoryAssociationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPatientInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeviceInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyEicOperationCompleted;
        
        private System.Threading.SendOrPostCallback UnRegisterEicOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServerKeyOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get911DataTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get911FieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Get911CategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCategoryField911OperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCategoryField911OperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCategoryField911OperationCompleted;
        
        private System.Threading.SendOrPostCallback Update911FieldsOperationCompleted;
        
        private System.Threading.SendOrPostCallback Update911CategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserInformation911OperationCompleted;
        
        private System.Threading.SendOrPostCallback AddInformation911OperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveC32DocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddAttachmentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ShareToNewProviderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDocumentByPatientIdOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Service() {
            this.Url = global::Mobius.Admin.Properties.Settings.Default.Mobius_Admin_AdminWebService_Service;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetPatientAttachmentCompletedEventHandler GetPatientAttachmentCompleted;
        
        /// <remarks/>
        public event GetSharedAttachmentCompletedEventHandler GetSharedAttachmentCompleted;
        
        /// <remarks/>
        public event GetSharedWithByIdCompletedEventHandler GetSharedWithByIdCompleted;
        
        /// <remarks/>
        public event ValidateUserForDocumentViewCompletedEventHandler ValidateUserForDocumentViewCompleted;
        
        /// <remarks/>
        public event RemoveShareCompletedEventHandler RemoveShareCompleted;
        
        /// <remarks/>
        public event LoginCompletedEventHandler LoginCompleted;
        
        /// <remarks/>
        public event LogoutCompletedEventHandler LogoutCompleted;
        
        /// <remarks/>
        public event GetAllUserInfoCompletedEventHandler GetAllUserInfoCompleted;
        
        /// <remarks/>
        public event GetSpecificPatientConstentCompletedEventHandler GetSpecificPatientConstentCompleted;
        
        /// <remarks/>
        public event UpdateUserInfoCompletedEventHandler UpdateUserInfoCompleted;
        
        /// <remarks/>
        public event UpdatePatientConsentInfoCompletedEventHandler UpdatePatientConsentInfoCompleted;
        
        /// <remarks/>
        public event GetUserMPIIDByUserIDCompletedEventHandler GetUserMPIIDByUserIDCompleted;
        
        /// <remarks/>
        public event GetPatientConstentCompletedEventHandler GetPatientConstentCompleted;
        
        /// <remarks/>
        public event FillListBoxCompletedEventHandler FillListBoxCompleted;
        
        /// <remarks/>
        public event GetUserGUIDByUserIDCompletedEventHandler GetUserGUIDByUserIDCompleted;
        
        /// <remarks/>
        public event GetCommnIdByPatientIdCompletedEventHandler GetCommnIdByPatientIdCompleted;
        
        /// <remarks/>
        public event GetDocIdPostFixCompletedEventHandler GetDocIdPostFixCompleted;
        
        /// <remarks/>
        public event UpdateDocPostFixCompletedEventHandler UpdateDocPostFixCompleted;
        
        /// <remarks/>
        public event GetConfigurationUserCompletedEventHandler GetConfigurationUserCompleted;
        
        /// <remarks/>
        public event GetConfigurationFacilityInfoCompletedEventHandler GetConfigurationFacilityInfoCompleted;
        
        /// <remarks/>
        public event GetRootCAKeyCompletedEventHandler GetRootCAKeyCompleted;
        
        /// <remarks/>
        public event GetDistinctUserInfoCompletedEventHandler GetDistinctUserInfoCompleted;
        
        /// <remarks/>
        public event GetCurrentFacilityInfoCompletedEventHandler GetCurrentFacilityInfoCompleted;
        
        /// <remarks/>
        public event GetUserInfoCompletedEventHandler GetUserInfoCompleted;
        
        /// <remarks/>
        public event GetUsersGroupCompletedEventHandler GetUsersGroupCompleted;
        
        /// <remarks/>
        public event CreateUserCompletedEventHandler CreateUserCompleted;
        
        /// <remarks/>
        public event GetDefaultPasswordCompletedEventHandler GetDefaultPasswordCompleted;
        
        /// <remarks/>
        public event SetDefaultPasswordCompletedEventHandler SetDefaultPasswordCompleted;
        
        /// <remarks/>
        public event DeleteUserCompletedEventHandler DeleteUserCompleted;
        
        /// <remarks/>
        public event ExecuteSqlCompletedEventHandler ExecuteSqlCompleted;
        
        /// <remarks/>
        public event CheckUserIdCompletedEventHandler CheckUserIdCompleted;
        
        /// <remarks/>
        public event CheckUniqueSSNCompletedEventHandler CheckUniqueSSNCompleted;
        
        /// <remarks/>
        public event CheckValidUserTypeCompletedEventHandler CheckValidUserTypeCompleted;
        
        /// <remarks/>
        public event GetFacilityNameCompletedEventHandler GetFacilityNameCompleted;
        
        /// <remarks/>
        public event ExportUserListCompletedEventHandler ExportUserListCompleted;
        
        /// <remarks/>
        public event ImportUserListCompletedEventHandler ImportUserListCompleted;
        
        /// <remarks/>
        public event SearchUserInfoCompletedEventHandler SearchUserInfoCompleted;
        
        /// <remarks/>
        public event GetAllRoleInfoCompletedEventHandler GetAllRoleInfoCompleted;
        
        /// <remarks/>
        public event SearchRoleInfoCompletedEventHandler SearchRoleInfoCompleted;
        
        /// <remarks/>
        public event CreateRoleCompletedEventHandler CreateRoleCompleted;
        
        /// <remarks/>
        public event DeleteRoleCompletedEventHandler DeleteRoleCompleted;
        
        /// <remarks/>
        public event GetAllPermissionsCompletedEventHandler GetAllPermissionsCompleted;
        
        /// <remarks/>
        public event GetAssociatePermissionsCompletedEventHandler GetAssociatePermissionsCompleted;
        
        /// <remarks/>
        public event GetPermissionCategoryOfAssociatedFacilityCompletedEventHandler GetPermissionCategoryOfAssociatedFacilityCompleted;
        
        /// <remarks/>
        public event GetCategoryInfoCompletedEventHandler GetCategoryInfoCompleted;
        
        /// <remarks/>
        public event SetPermissionsAndCategoryCompletedEventHandler SetPermissionsAndCategoryCompleted;
        
        /// <remarks/>
        public event UpdatePatientConsentPolicyCompletedEventHandler UpdatePatientConsentPolicyCompleted;
        
        /// <remarks/>
        public event SearchPermissionInfoCompletedEventHandler SearchPermissionInfoCompleted;
        
        /// <remarks/>
        public event CreatePermissionCompletedEventHandler CreatePermissionCompleted;
        
        /// <remarks/>
        public event DeletePermissionCompletedEventHandler DeletePermissionCompleted;
        
        /// <remarks/>
        public event GetAllServInfoCompletedEventHandler GetAllServInfoCompleted;
        
        /// <remarks/>
        public event GetFacilityInfoPublishCompletedEventHandler GetFacilityInfoPublishCompleted;
        
        /// <remarks/>
        public event GetFacilityInfoDetailsCompletedEventHandler GetFacilityInfoDetailsCompleted;
        
        /// <remarks/>
        public event UpdateFacilityInfoCompletedEventHandler UpdateFacilityInfoCompleted;
        
        /// <remarks/>
        public event RegisterServerCompletedEventHandler RegisterServerCompleted;
        
        /// <remarks/>
        public event GetAllEicInfoCompletedEventHandler GetAllEicInfoCompleted;
        
        /// <remarks/>
        public event SearchEicInfoCompletedEventHandler SearchEicInfoCompleted;
        
        /// <remarks/>
        public event RegisterEicCompletedEventHandler RegisterEicCompleted;
        
        /// <remarks/>
        public event CheckPatientConsentPolicyExistenceCompletedEventHandler CheckPatientConsentPolicyExistenceCompleted;
        
        /// <remarks/>
        public event DeleteEicCompletedEventHandler DeleteEicCompleted;
        
        /// <remarks/>
        public event CheckRegisterEICCompletedEventHandler CheckRegisterEICCompleted;
        
        /// <remarks/>
        public event FillDropDownCompletedEventHandler FillDropDownCompleted;
        
        /// <remarks/>
        public event GetFacilityInfoCompletedEventHandler GetFacilityInfoCompleted;
        
        /// <remarks/>
        public event GetPatient911XmlCompletedEventHandler GetPatient911XmlCompleted;
        
        /// <remarks/>
        public event GetAssociatedFacilityInfoCompletedEventHandler GetAssociatedFacilityInfoCompleted;
        
        /// <remarks/>
        public event DeleteDocumentByPatientIdCompletedEventHandler DeleteDocumentByPatientIdCompleted;
        
        /// <remarks/>
        public event DeleteSharingByPatientIdCompletedEventHandler DeleteSharingByPatientIdCompleted;
        
        /// <remarks/>
        public event FacilityAssociateCompletedEventHandler FacilityAssociateCompleted;
        
        /// <remarks/>
        public event DissociateFacilityCompletedEventHandler DissociateFacilityCompleted;
        
        /// <remarks/>
        public event CategoryAssociationCompletedEventHandler CategoryAssociationCompleted;
        
        /// <remarks/>
        public event GetPatientInfoCompletedEventHandler GetPatientInfoCompleted;
        
        /// <remarks/>
        public event GetDeviceInfoCompletedEventHandler GetDeviceInfoCompleted;
        
        /// <remarks/>
        public event VerifyEicCompletedEventHandler VerifyEicCompleted;
        
        /// <remarks/>
        public event UnRegisterEicCompletedEventHandler UnRegisterEicCompleted;
        
        /// <remarks/>
        public event GetServerKeyCompletedEventHandler GetServerKeyCompleted;
        
        /// <remarks/>
        public event Get911DataTypeCompletedEventHandler Get911DataTypeCompleted;
        
        /// <remarks/>
        public event Get911FieldsCompletedEventHandler Get911FieldsCompleted;
        
        /// <remarks/>
        public event Get911CategoryCompletedEventHandler Get911CategoryCompleted;
        
        /// <remarks/>
        public event GetCategoryField911CompletedEventHandler GetCategoryField911Completed;
        
        /// <remarks/>
        public event AddCategoryField911CompletedEventHandler AddCategoryField911Completed;
        
        /// <remarks/>
        public event DeleteCategoryField911CompletedEventHandler DeleteCategoryField911Completed;
        
        /// <remarks/>
        public event Update911FieldsCompletedEventHandler Update911FieldsCompleted;
        
        /// <remarks/>
        public event Update911CategoryCompletedEventHandler Update911CategoryCompleted;
        
        /// <remarks/>
        public event GetUserInformation911CompletedEventHandler GetUserInformation911Completed;
        
        /// <remarks/>
        public event AddInformation911CompletedEventHandler AddInformation911Completed;
        
        /// <remarks/>
        public event SaveC32DocumentCompletedEventHandler SaveC32DocumentCompleted;
        
        /// <remarks/>
        public event AddAttachmentCompletedEventHandler AddAttachmentCompleted;
        
        /// <remarks/>
        public event ShareToNewProviderCompletedEventHandler ShareToNewProviderCompleted;
        
        /// <remarks/>
        public event GetDocumentByPatientIdCompletedEventHandler GetDocumentByPatientIdCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatientAttachment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPatientAttachment(string PatientId, string SharedDocumentId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetPatientAttachment", new object[] {
                        PatientId,
                        SharedDocumentId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientAttachmentAsync(string PatientId, string SharedDocumentId) {
            this.GetPatientAttachmentAsync(PatientId, SharedDocumentId, null);
        }
        
        /// <remarks/>
        public void GetPatientAttachmentAsync(string PatientId, string SharedDocumentId, object userState) {
            if ((this.GetPatientAttachmentOperationCompleted == null)) {
                this.GetPatientAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientAttachmentOperationCompleted);
            }
            this.InvokeAsync("GetPatientAttachment", new object[] {
                        PatientId,
                        SharedDocumentId}, this.GetPatientAttachmentOperationCompleted, userState);
        }
        
        private void OnGetPatientAttachmentOperationCompleted(object arg) {
            if ((this.GetPatientAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientAttachmentCompleted(this, new GetPatientAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSharedAttachment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSharedAttachment(string SharedDocumentId, string ProviderEmail, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetSharedAttachment", new object[] {
                        SharedDocumentId,
                        ProviderEmail});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSharedAttachmentAsync(string SharedDocumentId, string ProviderEmail) {
            this.GetSharedAttachmentAsync(SharedDocumentId, ProviderEmail, null);
        }
        
        /// <remarks/>
        public void GetSharedAttachmentAsync(string SharedDocumentId, string ProviderEmail, object userState) {
            if ((this.GetSharedAttachmentOperationCompleted == null)) {
                this.GetSharedAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSharedAttachmentOperationCompleted);
            }
            this.InvokeAsync("GetSharedAttachment", new object[] {
                        SharedDocumentId,
                        ProviderEmail}, this.GetSharedAttachmentOperationCompleted, userState);
        }
        
        private void OnGetSharedAttachmentOperationCompleted(object arg) {
            if ((this.GetSharedAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSharedAttachmentCompleted(this, new GetSharedAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSharedWithById", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSharedWithById(string RefferedPatientId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetSharedWithById", new object[] {
                        RefferedPatientId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSharedWithByIdAsync(string RefferedPatientId) {
            this.GetSharedWithByIdAsync(RefferedPatientId, null);
        }
        
        /// <remarks/>
        public void GetSharedWithByIdAsync(string RefferedPatientId, object userState) {
            if ((this.GetSharedWithByIdOperationCompleted == null)) {
                this.GetSharedWithByIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSharedWithByIdOperationCompleted);
            }
            this.InvokeAsync("GetSharedWithById", new object[] {
                        RefferedPatientId}, this.GetSharedWithByIdOperationCompleted, userState);
        }
        
        private void OnGetSharedWithByIdOperationCompleted(object arg) {
            if ((this.GetSharedWithByIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSharedWithByIdCompleted(this, new GetSharedWithByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ValidateUserForDocumentView", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ValidateUserForDocumentView(string UserEmail, string DocumentId, out ErrorCode errorCode) {
            object[] results = this.Invoke("ValidateUserForDocumentView", new object[] {
                        UserEmail,
                        DocumentId});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateUserForDocumentViewAsync(string UserEmail, string DocumentId) {
            this.ValidateUserForDocumentViewAsync(UserEmail, DocumentId, null);
        }
        
        /// <remarks/>
        public void ValidateUserForDocumentViewAsync(string UserEmail, string DocumentId, object userState) {
            if ((this.ValidateUserForDocumentViewOperationCompleted == null)) {
                this.ValidateUserForDocumentViewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateUserForDocumentViewOperationCompleted);
            }
            this.InvokeAsync("ValidateUserForDocumentView", new object[] {
                        UserEmail,
                        DocumentId}, this.ValidateUserForDocumentViewOperationCompleted, userState);
        }
        
        private void OnValidateUserForDocumentViewOperationCompleted(object arg) {
            if ((this.ValidateUserForDocumentViewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateUserForDocumentViewCompleted(this, new ValidateUserForDocumentViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RemoveShare", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RemoveShare(string OriginalDocumentId, string ProviderEmail, out ErrorCode errorCode) {
            object[] results = this.Invoke("RemoveShare", new object[] {
                        OriginalDocumentId,
                        ProviderEmail});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RemoveShareAsync(string OriginalDocumentId, string ProviderEmail) {
            this.RemoveShareAsync(OriginalDocumentId, ProviderEmail, null);
        }
        
        /// <remarks/>
        public void RemoveShareAsync(string OriginalDocumentId, string ProviderEmail, object userState) {
            if ((this.RemoveShareOperationCompleted == null)) {
                this.RemoveShareOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRemoveShareOperationCompleted);
            }
            this.InvokeAsync("RemoveShare", new object[] {
                        OriginalDocumentId,
                        ProviderEmail}, this.RemoveShareOperationCompleted, userState);
        }
        
        private void OnRemoveShareOperationCompleted(object arg) {
            if ((this.RemoveShareCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RemoveShareCompleted(this, new RemoveShareCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Login", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string Login(string userId, string passwordHash, int facilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("Login", new object[] {
                        userId,
                        passwordHash,
                        facilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void LoginAsync(string userId, string passwordHash, int facilityId) {
            this.LoginAsync(userId, passwordHash, facilityId, null);
        }
        
        /// <remarks/>
        public void LoginAsync(string userId, string passwordHash, int facilityId, object userState) {
            if ((this.LoginOperationCompleted == null)) {
                this.LoginOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoginOperationCompleted);
            }
            this.InvokeAsync("Login", new object[] {
                        userId,
                        passwordHash,
                        facilityId}, this.LoginOperationCompleted, userState);
        }
        
        private void OnLoginOperationCompleted(object arg) {
            if ((this.LoginCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoginCompleted(this, new LoginCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Logout", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("errorCode")]
        public ErrorCode Logout(string token) {
            object[] results = this.Invoke("Logout", new object[] {
                        token});
            return ((ErrorCode)(results[0]));
        }
        
        /// <remarks/>
        public void LogoutAsync(string token) {
            this.LogoutAsync(token, null);
        }
        
        /// <remarks/>
        public void LogoutAsync(string token, object userState) {
            if ((this.LogoutOperationCompleted == null)) {
                this.LogoutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLogoutOperationCompleted);
            }
            this.InvokeAsync("Logout", new object[] {
                        token}, this.LogoutOperationCompleted, userState);
        }
        
        private void OnLogoutOperationCompleted(object arg) {
            if ((this.LogoutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LogoutCompleted(this, new LogoutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllUserInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllUserInfo(string token, int userTypeId, int facilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetAllUserInfo", new object[] {
                        token,
                        userTypeId,
                        facilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllUserInfoAsync(string token, int userTypeId, int facilityId) {
            this.GetAllUserInfoAsync(token, userTypeId, facilityId, null);
        }
        
        /// <remarks/>
        public void GetAllUserInfoAsync(string token, int userTypeId, int facilityId, object userState) {
            if ((this.GetAllUserInfoOperationCompleted == null)) {
                this.GetAllUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetAllUserInfo", new object[] {
                        token,
                        userTypeId,
                        facilityId}, this.GetAllUserInfoOperationCompleted, userState);
        }
        
        private void OnGetAllUserInfoOperationCompleted(object arg) {
            if ((this.GetAllUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllUserInfoCompleted(this, new GetAllUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetSpecificPatientConstent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetSpecificPatientConstent(string MPIID, int PatientConsentId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetSpecificPatientConstent", new object[] {
                        MPIID,
                        PatientConsentId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetSpecificPatientConstentAsync(string MPIID, int PatientConsentId) {
            this.GetSpecificPatientConstentAsync(MPIID, PatientConsentId, null);
        }
        
        /// <remarks/>
        public void GetSpecificPatientConstentAsync(string MPIID, int PatientConsentId, object userState) {
            if ((this.GetSpecificPatientConstentOperationCompleted == null)) {
                this.GetSpecificPatientConstentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSpecificPatientConstentOperationCompleted);
            }
            this.InvokeAsync("GetSpecificPatientConstent", new object[] {
                        MPIID,
                        PatientConsentId}, this.GetSpecificPatientConstentOperationCompleted, userState);
        }
        
        private void OnGetSpecificPatientConstentOperationCompleted(object arg) {
            if ((this.GetSpecificPatientConstentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSpecificPatientConstentCompleted(this, new GetSpecificPatientConstentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateUserInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdateUserInfo(string Userguid, int isoptin, out ErrorCode errorCode) {
            object[] results = this.Invoke("UpdateUserInfo", new object[] {
                        Userguid,
                        isoptin});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateUserInfoAsync(string Userguid, int isoptin) {
            this.UpdateUserInfoAsync(Userguid, isoptin, null);
        }
        
        /// <remarks/>
        public void UpdateUserInfoAsync(string Userguid, int isoptin, object userState) {
            if ((this.UpdateUserInfoOperationCompleted == null)) {
                this.UpdateUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateUserInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateUserInfo", new object[] {
                        Userguid,
                        isoptin}, this.UpdateUserInfoOperationCompleted, userState);
        }
        
        private void OnUpdateUserInfoOperationCompleted(object arg) {
            if ((this.UpdateUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateUserInfoCompleted(this, new UpdateUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePatientConsentInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePatientConsentInfo(string PatientConsentId, out ErrorCode errorCode) {
            object[] results = this.Invoke("UpdatePatientConsentInfo", new object[] {
                        PatientConsentId});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePatientConsentInfoAsync(string PatientConsentId) {
            this.UpdatePatientConsentInfoAsync(PatientConsentId, null);
        }
        
        /// <remarks/>
        public void UpdatePatientConsentInfoAsync(string PatientConsentId, object userState) {
            if ((this.UpdatePatientConsentInfoOperationCompleted == null)) {
                this.UpdatePatientConsentInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePatientConsentInfoOperationCompleted);
            }
            this.InvokeAsync("UpdatePatientConsentInfo", new object[] {
                        PatientConsentId}, this.UpdatePatientConsentInfoOperationCompleted, userState);
        }
        
        private void OnUpdatePatientConsentInfoOperationCompleted(object arg) {
            if ((this.UpdatePatientConsentInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePatientConsentInfoCompleted(this, new UpdatePatientConsentInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserMPIIDByUserID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserMPIIDByUserID(string UserID, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetUserMPIIDByUserID", new object[] {
                        UserID});
            errorCode = ((ErrorCode)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserMPIIDByUserIDAsync(string UserID) {
            this.GetUserMPIIDByUserIDAsync(UserID, null);
        }
        
        /// <remarks/>
        public void GetUserMPIIDByUserIDAsync(string UserID, object userState) {
            if ((this.GetUserMPIIDByUserIDOperationCompleted == null)) {
                this.GetUserMPIIDByUserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserMPIIDByUserIDOperationCompleted);
            }
            this.InvokeAsync("GetUserMPIIDByUserID", new object[] {
                        UserID}, this.GetUserMPIIDByUserIDOperationCompleted, userState);
        }
        
        private void OnGetUserMPIIDByUserIDOperationCompleted(object arg) {
            if ((this.GetUserMPIIDByUserIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserMPIIDByUserIDCompleted(this, new GetUserMPIIDByUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatientConstent", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPatientConstent(string MpiId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetPatientConstent", new object[] {
                        MpiId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientConstentAsync(string MpiId) {
            this.GetPatientConstentAsync(MpiId, null);
        }
        
        /// <remarks/>
        public void GetPatientConstentAsync(string MpiId, object userState) {
            if ((this.GetPatientConstentOperationCompleted == null)) {
                this.GetPatientConstentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientConstentOperationCompleted);
            }
            this.InvokeAsync("GetPatientConstent", new object[] {
                        MpiId}, this.GetPatientConstentOperationCompleted, userState);
        }
        
        private void OnGetPatientConstentOperationCompleted(object arg) {
            if ((this.GetPatientConstentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientConstentCompleted(this, new GetPatientConstentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FillListBox", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FillListBox(int FacilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("FillListBox", new object[] {
                        FacilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FillListBoxAsync(int FacilityId) {
            this.FillListBoxAsync(FacilityId, null);
        }
        
        /// <remarks/>
        public void FillListBoxAsync(int FacilityId, object userState) {
            if ((this.FillListBoxOperationCompleted == null)) {
                this.FillListBoxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillListBoxOperationCompleted);
            }
            this.InvokeAsync("FillListBox", new object[] {
                        FacilityId}, this.FillListBoxOperationCompleted, userState);
        }
        
        private void OnFillListBoxOperationCompleted(object arg) {
            if ((this.FillListBoxCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillListBoxCompleted(this, new FillListBoxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserGUIDByUserID", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetUserGUIDByUserID(string UserID, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetUserGUIDByUserID", new object[] {
                        UserID});
            errorCode = ((ErrorCode)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserGUIDByUserIDAsync(string UserID) {
            this.GetUserGUIDByUserIDAsync(UserID, null);
        }
        
        /// <remarks/>
        public void GetUserGUIDByUserIDAsync(string UserID, object userState) {
            if ((this.GetUserGUIDByUserIDOperationCompleted == null)) {
                this.GetUserGUIDByUserIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserGUIDByUserIDOperationCompleted);
            }
            this.InvokeAsync("GetUserGUIDByUserID", new object[] {
                        UserID}, this.GetUserGUIDByUserIDOperationCompleted, userState);
        }
        
        private void OnGetUserGUIDByUserIDOperationCompleted(object arg) {
            if ((this.GetUserGUIDByUserIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserGUIDByUserIDCompleted(this, new GetUserGUIDByUserIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCommnIdByPatientId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCommnIdByPatientId(string UserID, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetCommnIdByPatientId", new object[] {
                        UserID});
            errorCode = ((ErrorCode)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCommnIdByPatientIdAsync(string UserID) {
            this.GetCommnIdByPatientIdAsync(UserID, null);
        }
        
        /// <remarks/>
        public void GetCommnIdByPatientIdAsync(string UserID, object userState) {
            if ((this.GetCommnIdByPatientIdOperationCompleted == null)) {
                this.GetCommnIdByPatientIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCommnIdByPatientIdOperationCompleted);
            }
            this.InvokeAsync("GetCommnIdByPatientId", new object[] {
                        UserID}, this.GetCommnIdByPatientIdOperationCompleted, userState);
        }
        
        private void OnGetCommnIdByPatientIdOperationCompleted(object arg) {
            if ((this.GetCommnIdByPatientIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCommnIdByPatientIdCompleted(this, new GetCommnIdByPatientIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocIdPostFix", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDocIdPostFix(out ErrorCode errorCode) {
            object[] results = this.Invoke("GetDocIdPostFix", new object[0]);
            errorCode = ((ErrorCode)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocIdPostFixAsync() {
            this.GetDocIdPostFixAsync(null);
        }
        
        /// <remarks/>
        public void GetDocIdPostFixAsync(object userState) {
            if ((this.GetDocIdPostFixOperationCompleted == null)) {
                this.GetDocIdPostFixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocIdPostFixOperationCompleted);
            }
            this.InvokeAsync("GetDocIdPostFix", new object[0], this.GetDocIdPostFixOperationCompleted, userState);
        }
        
        private void OnGetDocIdPostFixOperationCompleted(object arg) {
            if ((this.GetDocIdPostFixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocIdPostFixCompleted(this, new GetDocIdPostFixCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateDocPostFix", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateDocPostFix() {
            this.Invoke("UpdateDocPostFix", new object[0]);
        }
        
        /// <remarks/>
        public void UpdateDocPostFixAsync() {
            this.UpdateDocPostFixAsync(null);
        }
        
        /// <remarks/>
        public void UpdateDocPostFixAsync(object userState) {
            if ((this.UpdateDocPostFixOperationCompleted == null)) {
                this.UpdateDocPostFixOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDocPostFixOperationCompleted);
            }
            this.InvokeAsync("UpdateDocPostFix", new object[0], this.UpdateDocPostFixOperationCompleted, userState);
        }
        
        private void OnUpdateDocPostFixOperationCompleted(object arg) {
            if ((this.UpdateDocPostFixCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDocPostFixCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConfigurationUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetConfigurationUser(string UserId, int FacilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetConfigurationUser", new object[] {
                        UserId,
                        FacilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetConfigurationUserAsync(string UserId, int FacilityId) {
            this.GetConfigurationUserAsync(UserId, FacilityId, null);
        }
        
        /// <remarks/>
        public void GetConfigurationUserAsync(string UserId, int FacilityId, object userState) {
            if ((this.GetConfigurationUserOperationCompleted == null)) {
                this.GetConfigurationUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigurationUserOperationCompleted);
            }
            this.InvokeAsync("GetConfigurationUser", new object[] {
                        UserId,
                        FacilityId}, this.GetConfigurationUserOperationCompleted, userState);
        }
        
        private void OnGetConfigurationUserOperationCompleted(object arg) {
            if ((this.GetConfigurationUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConfigurationUserCompleted(this, new GetConfigurationUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetConfigurationFacilityInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetConfigurationFacilityInfo(int FacilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetConfigurationFacilityInfo", new object[] {
                        FacilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetConfigurationFacilityInfoAsync(int FacilityId) {
            this.GetConfigurationFacilityInfoAsync(FacilityId, null);
        }
        
        /// <remarks/>
        public void GetConfigurationFacilityInfoAsync(int FacilityId, object userState) {
            if ((this.GetConfigurationFacilityInfoOperationCompleted == null)) {
                this.GetConfigurationFacilityInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetConfigurationFacilityInfoOperationCompleted);
            }
            this.InvokeAsync("GetConfigurationFacilityInfo", new object[] {
                        FacilityId}, this.GetConfigurationFacilityInfoOperationCompleted, userState);
        }
        
        private void OnGetConfigurationFacilityInfoOperationCompleted(object arg) {
            if ((this.GetConfigurationFacilityInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetConfigurationFacilityInfoCompleted(this, new GetConfigurationFacilityInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetRootCAKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRootCAKey(out ErrorCode errorCode) {
            object[] results = this.Invoke("GetRootCAKey", new object[0]);
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRootCAKeyAsync() {
            this.GetRootCAKeyAsync(null);
        }
        
        /// <remarks/>
        public void GetRootCAKeyAsync(object userState) {
            if ((this.GetRootCAKeyOperationCompleted == null)) {
                this.GetRootCAKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRootCAKeyOperationCompleted);
            }
            this.InvokeAsync("GetRootCAKey", new object[0], this.GetRootCAKeyOperationCompleted, userState);
        }
        
        private void OnGetRootCAKeyOperationCompleted(object arg) {
            if ((this.GetRootCAKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRootCAKeyCompleted(this, new GetRootCAKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDistinctUserInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDistinctUserInfo(string token, int userTypeId, int facilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetDistinctUserInfo", new object[] {
                        token,
                        userTypeId,
                        facilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDistinctUserInfoAsync(string token, int userTypeId, int facilityId) {
            this.GetDistinctUserInfoAsync(token, userTypeId, facilityId, null);
        }
        
        /// <remarks/>
        public void GetDistinctUserInfoAsync(string token, int userTypeId, int facilityId, object userState) {
            if ((this.GetDistinctUserInfoOperationCompleted == null)) {
                this.GetDistinctUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDistinctUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetDistinctUserInfo", new object[] {
                        token,
                        userTypeId,
                        facilityId}, this.GetDistinctUserInfoOperationCompleted, userState);
        }
        
        private void OnGetDistinctUserInfoOperationCompleted(object arg) {
            if ((this.GetDistinctUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDistinctUserInfoCompleted(this, new GetDistinctUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCurrentFacilityInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCurrentFacilityInfo(string token, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetCurrentFacilityInfo", new object[] {
                        token});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentFacilityInfoAsync(string token) {
            this.GetCurrentFacilityInfoAsync(token, null);
        }
        
        /// <remarks/>
        public void GetCurrentFacilityInfoAsync(string token, object userState) {
            if ((this.GetCurrentFacilityInfoOperationCompleted == null)) {
                this.GetCurrentFacilityInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentFacilityInfoOperationCompleted);
            }
            this.InvokeAsync("GetCurrentFacilityInfo", new object[] {
                        token}, this.GetCurrentFacilityInfoOperationCompleted, userState);
        }
        
        private void OnGetCurrentFacilityInfoOperationCompleted(object arg) {
            if ((this.GetCurrentFacilityInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentFacilityInfoCompleted(this, new GetCurrentFacilityInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetUserInfo(string token, string userGuid, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetUserInfo", new object[] {
                        token,
                        userGuid});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(string token, string userGuid) {
            this.GetUserInfoAsync(token, userGuid, null);
        }
        
        /// <remarks/>
        public void GetUserInfoAsync(string token, string userGuid, object userState) {
            if ((this.GetUserInfoOperationCompleted == null)) {
                this.GetUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInfoOperationCompleted);
            }
            this.InvokeAsync("GetUserInfo", new object[] {
                        token,
                        userGuid}, this.GetUserInfoOperationCompleted, userState);
        }
        
        private void OnGetUserInfoOperationCompleted(object arg) {
            if ((this.GetUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInfoCompleted(this, new GetUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUsersGroup", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetUsersGroup(string userId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetUsersGroup", new object[] {
                        userId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetUsersGroupAsync(string userId) {
            this.GetUsersGroupAsync(userId, null);
        }
        
        /// <remarks/>
        public void GetUsersGroupAsync(string userId, object userState) {
            if ((this.GetUsersGroupOperationCompleted == null)) {
                this.GetUsersGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUsersGroupOperationCompleted);
            }
            this.InvokeAsync("GetUsersGroup", new object[] {
                        userId}, this.GetUsersGroupOperationCompleted, userState);
        }
        
        private void OnGetUsersGroupOperationCompleted(object arg) {
            if ((this.GetUsersGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUsersGroupCompleted(this, new GetUsersGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateUser(
                    string token, 
                    string userGuid, 
                    string userId, 
                    string passwordHash, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string email, 
                    string dob, 
                    string ssn, 
                    int userTypeId, 
                    int facilityId, 
                    string eic, 
                    bool isActive, 
                    string unit, 
                    string initials, 
                    string category, 
                    string nationality, 
                    string force, 
                    string sex, 
                    string uic, 
                    string religion, 
                    string fmp, 
                    string race, 
                    string mos, 
                    string grade, 
                    bool canWorkOffline, 
                    out int CheckuserId, 
                    out ErrorCode errorCode) {
            object[] results = this.Invoke("CreateUser", new object[] {
                        token,
                        userGuid,
                        userId,
                        passwordHash,
                        firstName,
                        middleName,
                        lastName,
                        email,
                        dob,
                        ssn,
                        userTypeId,
                        facilityId,
                        eic,
                        isActive,
                        unit,
                        initials,
                        category,
                        nationality,
                        force,
                        sex,
                        uic,
                        religion,
                        fmp,
                        race,
                        mos,
                        grade,
                        canWorkOffline});
            CheckuserId = ((int)(results[1]));
            errorCode = ((ErrorCode)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateUserAsync(
                    string token, 
                    string userGuid, 
                    string userId, 
                    string passwordHash, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string email, 
                    string dob, 
                    string ssn, 
                    int userTypeId, 
                    int facilityId, 
                    string eic, 
                    bool isActive, 
                    string unit, 
                    string initials, 
                    string category, 
                    string nationality, 
                    string force, 
                    string sex, 
                    string uic, 
                    string religion, 
                    string fmp, 
                    string race, 
                    string mos, 
                    string grade, 
                    bool canWorkOffline) {
            this.CreateUserAsync(token, userGuid, userId, passwordHash, firstName, middleName, lastName, email, dob, ssn, userTypeId, facilityId, eic, isActive, unit, initials, category, nationality, force, sex, uic, religion, fmp, race, mos, grade, canWorkOffline, null);
        }
        
        /// <remarks/>
        public void CreateUserAsync(
                    string token, 
                    string userGuid, 
                    string userId, 
                    string passwordHash, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string email, 
                    string dob, 
                    string ssn, 
                    int userTypeId, 
                    int facilityId, 
                    string eic, 
                    bool isActive, 
                    string unit, 
                    string initials, 
                    string category, 
                    string nationality, 
                    string force, 
                    string sex, 
                    string uic, 
                    string religion, 
                    string fmp, 
                    string race, 
                    string mos, 
                    string grade, 
                    bool canWorkOffline, 
                    object userState) {
            if ((this.CreateUserOperationCompleted == null)) {
                this.CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateUserOperationCompleted);
            }
            this.InvokeAsync("CreateUser", new object[] {
                        token,
                        userGuid,
                        userId,
                        passwordHash,
                        firstName,
                        middleName,
                        lastName,
                        email,
                        dob,
                        ssn,
                        userTypeId,
                        facilityId,
                        eic,
                        isActive,
                        unit,
                        initials,
                        category,
                        nationality,
                        force,
                        sex,
                        uic,
                        religion,
                        fmp,
                        race,
                        mos,
                        grade,
                        canWorkOffline}, this.CreateUserOperationCompleted, userState);
        }
        
        private void OnCreateUserOperationCompleted(object arg) {
            if ((this.CreateUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateUserCompleted(this, new CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDefaultPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDefaultPassword(string token, int facilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetDefaultPassword", new object[] {
                        token,
                        facilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDefaultPasswordAsync(string token, int facilityId) {
            this.GetDefaultPasswordAsync(token, facilityId, null);
        }
        
        /// <remarks/>
        public void GetDefaultPasswordAsync(string token, int facilityId, object userState) {
            if ((this.GetDefaultPasswordOperationCompleted == null)) {
                this.GetDefaultPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDefaultPasswordOperationCompleted);
            }
            this.InvokeAsync("GetDefaultPassword", new object[] {
                        token,
                        facilityId}, this.GetDefaultPasswordOperationCompleted, userState);
        }
        
        private void OnGetDefaultPasswordOperationCompleted(object arg) {
            if ((this.GetDefaultPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDefaultPasswordCompleted(this, new GetDefaultPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetDefaultPassword", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetDefaultPassword(string token, int facilityId, string newPassword, out ErrorCode errorCode) {
            object[] results = this.Invoke("SetDefaultPassword", new object[] {
                        token,
                        facilityId,
                        newPassword});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetDefaultPasswordAsync(string token, int facilityId, string newPassword) {
            this.SetDefaultPasswordAsync(token, facilityId, newPassword, null);
        }
        
        /// <remarks/>
        public void SetDefaultPasswordAsync(string token, int facilityId, string newPassword, object userState) {
            if ((this.SetDefaultPasswordOperationCompleted == null)) {
                this.SetDefaultPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetDefaultPasswordOperationCompleted);
            }
            this.InvokeAsync("SetDefaultPassword", new object[] {
                        token,
                        facilityId,
                        newPassword}, this.SetDefaultPasswordOperationCompleted, userState);
        }
        
        private void OnSetDefaultPasswordOperationCompleted(object arg) {
            if ((this.SetDefaultPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetDefaultPasswordCompleted(this, new SetDefaultPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteUser", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteUser(string token, string userGuid, out ErrorCode errorCode) {
            object[] results = this.Invoke("DeleteUser", new object[] {
                        token,
                        userGuid});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string token, string userGuid) {
            this.DeleteUserAsync(token, userGuid, null);
        }
        
        /// <remarks/>
        public void DeleteUserAsync(string token, string userGuid, object userState) {
            if ((this.DeleteUserOperationCompleted == null)) {
                this.DeleteUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteUserOperationCompleted);
            }
            this.InvokeAsync("DeleteUser", new object[] {
                        token,
                        userGuid}, this.DeleteUserOperationCompleted, userState);
        }
        
        private void OnDeleteUserOperationCompleted(object arg) {
            if ((this.DeleteUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExecuteSql", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ExecuteSql(string script, out ErrorCode errorCode) {
            object[] results = this.Invoke("ExecuteSql", new object[] {
                        script});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ExecuteSqlAsync(string script) {
            this.ExecuteSqlAsync(script, null);
        }
        
        /// <remarks/>
        public void ExecuteSqlAsync(string script, object userState) {
            if ((this.ExecuteSqlOperationCompleted == null)) {
                this.ExecuteSqlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExecuteSqlOperationCompleted);
            }
            this.InvokeAsync("ExecuteSql", new object[] {
                        script}, this.ExecuteSqlOperationCompleted, userState);
        }
        
        private void OnExecuteSqlOperationCompleted(object arg) {
            if ((this.ExecuteSqlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExecuteSqlCompleted(this, new ExecuteSqlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUserId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckUserId(string token, string userId, [System.Xml.Serialization.XmlElementAttribute("checkUserId")] out int checkUserId1, out ErrorCode errorCode) {
            object[] results = this.Invoke("CheckUserId", new object[] {
                        token,
                        userId});
            checkUserId1 = ((int)(results[1]));
            errorCode = ((ErrorCode)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUserIdAsync(string token, string userId) {
            this.CheckUserIdAsync(token, userId, null);
        }
        
        /// <remarks/>
        public void CheckUserIdAsync(string token, string userId, object userState) {
            if ((this.CheckUserIdOperationCompleted == null)) {
                this.CheckUserIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUserIdOperationCompleted);
            }
            this.InvokeAsync("CheckUserId", new object[] {
                        token,
                        userId}, this.CheckUserIdOperationCompleted, userState);
        }
        
        private void OnCheckUserIdOperationCompleted(object arg) {
            if ((this.CheckUserIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUserIdCompleted(this, new CheckUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckUniqueSSN", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckUniqueSSN(string token, string SSN, out ErrorCode errorCode) {
            object[] results = this.Invoke("CheckUniqueSSN", new object[] {
                        token,
                        SSN});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckUniqueSSNAsync(string token, string SSN) {
            this.CheckUniqueSSNAsync(token, SSN, null);
        }
        
        /// <remarks/>
        public void CheckUniqueSSNAsync(string token, string SSN, object userState) {
            if ((this.CheckUniqueSSNOperationCompleted == null)) {
                this.CheckUniqueSSNOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckUniqueSSNOperationCompleted);
            }
            this.InvokeAsync("CheckUniqueSSN", new object[] {
                        token,
                        SSN}, this.CheckUniqueSSNOperationCompleted, userState);
        }
        
        private void OnCheckUniqueSSNOperationCompleted(object arg) {
            if ((this.CheckUniqueSSNCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckUniqueSSNCompleted(this, new CheckUniqueSSNCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckValidUserType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckValidUserType(string token, string userType, out ErrorCode errorCode) {
            object[] results = this.Invoke("CheckValidUserType", new object[] {
                        token,
                        userType});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckValidUserTypeAsync(string token, string userType) {
            this.CheckValidUserTypeAsync(token, userType, null);
        }
        
        /// <remarks/>
        public void CheckValidUserTypeAsync(string token, string userType, object userState) {
            if ((this.CheckValidUserTypeOperationCompleted == null)) {
                this.CheckValidUserTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckValidUserTypeOperationCompleted);
            }
            this.InvokeAsync("CheckValidUserType", new object[] {
                        token,
                        userType}, this.CheckValidUserTypeOperationCompleted, userState);
        }
        
        private void OnCheckValidUserTypeOperationCompleted(object arg) {
            if ((this.CheckValidUserTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckValidUserTypeCompleted(this, new CheckValidUserTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFacilityName", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetFacilityName(string token, int FacilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetFacilityName", new object[] {
                        token,
                        FacilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacilityNameAsync(string token, int FacilityId) {
            this.GetFacilityNameAsync(token, FacilityId, null);
        }
        
        /// <remarks/>
        public void GetFacilityNameAsync(string token, int FacilityId, object userState) {
            if ((this.GetFacilityNameOperationCompleted == null)) {
                this.GetFacilityNameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacilityNameOperationCompleted);
            }
            this.InvokeAsync("GetFacilityName", new object[] {
                        token,
                        FacilityId}, this.GetFacilityNameOperationCompleted, userState);
        }
        
        private void OnGetFacilityNameOperationCompleted(object arg) {
            if ((this.GetFacilityNameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacilityNameCompleted(this, new GetFacilityNameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ExportUserList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet ExportUserList(string token, string userId, out ErrorCode errorCode) {
            object[] results = this.Invoke("ExportUserList", new object[] {
                        token,
                        userId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void ExportUserListAsync(string token, string userId) {
            this.ExportUserListAsync(token, userId, null);
        }
        
        /// <remarks/>
        public void ExportUserListAsync(string token, string userId, object userState) {
            if ((this.ExportUserListOperationCompleted == null)) {
                this.ExportUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportUserListOperationCompleted);
            }
            this.InvokeAsync("ExportUserList", new object[] {
                        token,
                        userId}, this.ExportUserListOperationCompleted, userState);
        }
        
        private void OnExportUserListOperationCompleted(object arg) {
            if ((this.ExportUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportUserListCompleted(this, new ExportUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ImportUserList", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ImportUserList(
                    string token, 
                    string id, 
                    string userId, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string ssn, 
                    string userType, 
                    bool isActive, 
                    string facilityName, 
                    string nationality, 
                    string force, 
                    string sex, 
                    string uic, 
                    string religion, 
                    string fmp, 
                    string race, 
                    string mos, 
                    string grade, 
                    string email, 
                    string dob, 
                    out int checkUserId, 
                    out ErrorCode errorCode) {
            object[] results = this.Invoke("ImportUserList", new object[] {
                        token,
                        id,
                        userId,
                        firstName,
                        middleName,
                        lastName,
                        ssn,
                        userType,
                        isActive,
                        facilityName,
                        nationality,
                        force,
                        sex,
                        uic,
                        religion,
                        fmp,
                        race,
                        mos,
                        grade,
                        email,
                        dob});
            checkUserId = ((int)(results[1]));
            errorCode = ((ErrorCode)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ImportUserListAsync(
                    string token, 
                    string id, 
                    string userId, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string ssn, 
                    string userType, 
                    bool isActive, 
                    string facilityName, 
                    string nationality, 
                    string force, 
                    string sex, 
                    string uic, 
                    string religion, 
                    string fmp, 
                    string race, 
                    string mos, 
                    string grade, 
                    string email, 
                    string dob) {
            this.ImportUserListAsync(token, id, userId, firstName, middleName, lastName, ssn, userType, isActive, facilityName, nationality, force, sex, uic, religion, fmp, race, mos, grade, email, dob, null);
        }
        
        /// <remarks/>
        public void ImportUserListAsync(
                    string token, 
                    string id, 
                    string userId, 
                    string firstName, 
                    string middleName, 
                    string lastName, 
                    string ssn, 
                    string userType, 
                    bool isActive, 
                    string facilityName, 
                    string nationality, 
                    string force, 
                    string sex, 
                    string uic, 
                    string religion, 
                    string fmp, 
                    string race, 
                    string mos, 
                    string grade, 
                    string email, 
                    string dob, 
                    object userState) {
            if ((this.ImportUserListOperationCompleted == null)) {
                this.ImportUserListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportUserListOperationCompleted);
            }
            this.InvokeAsync("ImportUserList", new object[] {
                        token,
                        id,
                        userId,
                        firstName,
                        middleName,
                        lastName,
                        ssn,
                        userType,
                        isActive,
                        facilityName,
                        nationality,
                        force,
                        sex,
                        uic,
                        religion,
                        fmp,
                        race,
                        mos,
                        grade,
                        email,
                        dob}, this.ImportUserListOperationCompleted, userState);
        }
        
        private void OnImportUserListOperationCompleted(object arg) {
            if ((this.ImportUserListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportUserListCompleted(this, new ImportUserListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchUserInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SearchUserInfo(string token, string userId, string firstName, string middleName, string lastName, string email, string dob, string ssn, int userTypeId, int facilityId, string EicSerialID, out ErrorCode errorCode) {
            object[] results = this.Invoke("SearchUserInfo", new object[] {
                        token,
                        userId,
                        firstName,
                        middleName,
                        lastName,
                        email,
                        dob,
                        ssn,
                        userTypeId,
                        facilityId,
                        EicSerialID});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SearchUserInfoAsync(string token, string userId, string firstName, string middleName, string lastName, string email, string dob, string ssn, int userTypeId, int facilityId, string EicSerialID) {
            this.SearchUserInfoAsync(token, userId, firstName, middleName, lastName, email, dob, ssn, userTypeId, facilityId, EicSerialID, null);
        }
        
        /// <remarks/>
        public void SearchUserInfoAsync(string token, string userId, string firstName, string middleName, string lastName, string email, string dob, string ssn, int userTypeId, int facilityId, string EicSerialID, object userState) {
            if ((this.SearchUserInfoOperationCompleted == null)) {
                this.SearchUserInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchUserInfoOperationCompleted);
            }
            this.InvokeAsync("SearchUserInfo", new object[] {
                        token,
                        userId,
                        firstName,
                        middleName,
                        lastName,
                        email,
                        dob,
                        ssn,
                        userTypeId,
                        facilityId,
                        EicSerialID}, this.SearchUserInfoOperationCompleted, userState);
        }
        
        private void OnSearchUserInfoOperationCompleted(object arg) {
            if ((this.SearchUserInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchUserInfoCompleted(this, new SearchUserInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllRoleInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllRoleInfo(string token, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetAllRoleInfo", new object[] {
                        token});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllRoleInfoAsync(string token) {
            this.GetAllRoleInfoAsync(token, null);
        }
        
        /// <remarks/>
        public void GetAllRoleInfoAsync(string token, object userState) {
            if ((this.GetAllRoleInfoOperationCompleted == null)) {
                this.GetAllRoleInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllRoleInfoOperationCompleted);
            }
            this.InvokeAsync("GetAllRoleInfo", new object[] {
                        token}, this.GetAllRoleInfoOperationCompleted, userState);
        }
        
        private void OnGetAllRoleInfoOperationCompleted(object arg) {
            if ((this.GetAllRoleInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllRoleInfoCompleted(this, new GetAllRoleInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchRoleInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SearchRoleInfo(string token, string roleName, string roleDescription, out ErrorCode errorCode) {
            object[] results = this.Invoke("SearchRoleInfo", new object[] {
                        token,
                        roleName,
                        roleDescription});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SearchRoleInfoAsync(string token, string roleName, string roleDescription) {
            this.SearchRoleInfoAsync(token, roleName, roleDescription, null);
        }
        
        /// <remarks/>
        public void SearchRoleInfoAsync(string token, string roleName, string roleDescription, object userState) {
            if ((this.SearchRoleInfoOperationCompleted == null)) {
                this.SearchRoleInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchRoleInfoOperationCompleted);
            }
            this.InvokeAsync("SearchRoleInfo", new object[] {
                        token,
                        roleName,
                        roleDescription}, this.SearchRoleInfoOperationCompleted, userState);
        }
        
        private void OnSearchRoleInfoOperationCompleted(object arg) {
            if ((this.SearchRoleInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchRoleInfoCompleted(this, new SearchRoleInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreateRole", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreateRole(string token, int roleId, string roleName, string roleDescription, string roleKeyPublic, string roleKeyPrivate, out ErrorCode errorCode) {
            object[] results = this.Invoke("CreateRole", new object[] {
                        token,
                        roleId,
                        roleName,
                        roleDescription,
                        roleKeyPublic,
                        roleKeyPrivate});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreateRoleAsync(string token, int roleId, string roleName, string roleDescription, string roleKeyPublic, string roleKeyPrivate) {
            this.CreateRoleAsync(token, roleId, roleName, roleDescription, roleKeyPublic, roleKeyPrivate, null);
        }
        
        /// <remarks/>
        public void CreateRoleAsync(string token, int roleId, string roleName, string roleDescription, string roleKeyPublic, string roleKeyPrivate, object userState) {
            if ((this.CreateRoleOperationCompleted == null)) {
                this.CreateRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateRoleOperationCompleted);
            }
            this.InvokeAsync("CreateRole", new object[] {
                        token,
                        roleId,
                        roleName,
                        roleDescription,
                        roleKeyPublic,
                        roleKeyPrivate}, this.CreateRoleOperationCompleted, userState);
        }
        
        private void OnCreateRoleOperationCompleted(object arg) {
            if ((this.CreateRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateRoleCompleted(this, new CreateRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteRole", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteRole(string token, int roleId, out ErrorCode errorCode) {
            object[] results = this.Invoke("DeleteRole", new object[] {
                        token,
                        roleId});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteRoleAsync(string token, int roleId) {
            this.DeleteRoleAsync(token, roleId, null);
        }
        
        /// <remarks/>
        public void DeleteRoleAsync(string token, int roleId, object userState) {
            if ((this.DeleteRoleOperationCompleted == null)) {
                this.DeleteRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRoleOperationCompleted);
            }
            this.InvokeAsync("DeleteRole", new object[] {
                        token,
                        roleId}, this.DeleteRoleOperationCompleted, userState);
        }
        
        private void OnDeleteRoleOperationCompleted(object arg) {
            if ((this.DeleteRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRoleCompleted(this, new DeleteRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllPermissions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllPermissions(string token, int userTypeId, int facilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetAllPermissions", new object[] {
                        token,
                        userTypeId,
                        facilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllPermissionsAsync(string token, int userTypeId, int facilityId) {
            this.GetAllPermissionsAsync(token, userTypeId, facilityId, null);
        }
        
        /// <remarks/>
        public void GetAllPermissionsAsync(string token, int userTypeId, int facilityId, object userState) {
            if ((this.GetAllPermissionsOperationCompleted == null)) {
                this.GetAllPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetAllPermissions", new object[] {
                        token,
                        userTypeId,
                        facilityId}, this.GetAllPermissionsOperationCompleted, userState);
        }
        
        private void OnGetAllPermissionsOperationCompleted(object arg) {
            if ((this.GetAllPermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllPermissionsCompleted(this, new GetAllPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAssociatePermissions", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAssociatePermissions(string token, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetAssociatePermissions", new object[] {
                        token});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssociatePermissionsAsync(string token) {
            this.GetAssociatePermissionsAsync(token, null);
        }
        
        /// <remarks/>
        public void GetAssociatePermissionsAsync(string token, object userState) {
            if ((this.GetAssociatePermissionsOperationCompleted == null)) {
                this.GetAssociatePermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssociatePermissionsOperationCompleted);
            }
            this.InvokeAsync("GetAssociatePermissions", new object[] {
                        token}, this.GetAssociatePermissionsOperationCompleted, userState);
        }
        
        private void OnGetAssociatePermissionsOperationCompleted(object arg) {
            if ((this.GetAssociatePermissionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssociatePermissionsCompleted(this, new GetAssociatePermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPermissionCategoryOfAssociatedFacility", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetPermissionCategoryOfAssociatedFacility(int SourceFacilityId, int TargetFacilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetPermissionCategoryOfAssociatedFacility", new object[] {
                        SourceFacilityId,
                        TargetFacilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetPermissionCategoryOfAssociatedFacilityAsync(int SourceFacilityId, int TargetFacilityId) {
            this.GetPermissionCategoryOfAssociatedFacilityAsync(SourceFacilityId, TargetFacilityId, null);
        }
        
        /// <remarks/>
        public void GetPermissionCategoryOfAssociatedFacilityAsync(int SourceFacilityId, int TargetFacilityId, object userState) {
            if ((this.GetPermissionCategoryOfAssociatedFacilityOperationCompleted == null)) {
                this.GetPermissionCategoryOfAssociatedFacilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPermissionCategoryOfAssociatedFacilityOperationCompleted);
            }
            this.InvokeAsync("GetPermissionCategoryOfAssociatedFacility", new object[] {
                        SourceFacilityId,
                        TargetFacilityId}, this.GetPermissionCategoryOfAssociatedFacilityOperationCompleted, userState);
        }
        
        private void OnGetPermissionCategoryOfAssociatedFacilityOperationCompleted(object arg) {
            if ((this.GetPermissionCategoryOfAssociatedFacilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPermissionCategoryOfAssociatedFacilityCompleted(this, new GetPermissionCategoryOfAssociatedFacilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCategoryInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCategoryInfo(string token, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetCategoryInfo", new object[] {
                        token});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCategoryInfoAsync(string token) {
            this.GetCategoryInfoAsync(token, null);
        }
        
        /// <remarks/>
        public void GetCategoryInfoAsync(string token, object userState) {
            if ((this.GetCategoryInfoOperationCompleted == null)) {
                this.GetCategoryInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategoryInfoOperationCompleted);
            }
            this.InvokeAsync("GetCategoryInfo", new object[] {
                        token}, this.GetCategoryInfoOperationCompleted, userState);
        }
        
        private void OnGetCategoryInfoOperationCompleted(object arg) {
            if ((this.GetCategoryInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategoryInfoCompleted(this, new GetCategoryInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SetPermissionsAndCategory", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SetPermissionsAndCategory(string token, int userTypeId, int facilityId, int PermID, string Value, out ErrorCode errorCode) {
            object[] results = this.Invoke("SetPermissionsAndCategory", new object[] {
                        token,
                        userTypeId,
                        facilityId,
                        PermID,
                        Value});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SetPermissionsAndCategoryAsync(string token, int userTypeId, int facilityId, int PermID, string Value) {
            this.SetPermissionsAndCategoryAsync(token, userTypeId, facilityId, PermID, Value, null);
        }
        
        /// <remarks/>
        public void SetPermissionsAndCategoryAsync(string token, int userTypeId, int facilityId, int PermID, string Value, object userState) {
            if ((this.SetPermissionsAndCategoryOperationCompleted == null)) {
                this.SetPermissionsAndCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetPermissionsAndCategoryOperationCompleted);
            }
            this.InvokeAsync("SetPermissionsAndCategory", new object[] {
                        token,
                        userTypeId,
                        facilityId,
                        PermID,
                        Value}, this.SetPermissionsAndCategoryOperationCompleted, userState);
        }
        
        private void OnSetPermissionsAndCategoryOperationCompleted(object arg) {
            if ((this.SetPermissionsAndCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetPermissionsAndCategoryCompleted(this, new SetPermissionsAndCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdatePatientConsentPolicy", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UpdatePatientConsentPolicy(string MPPID, string isNew, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> patientConsentId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> GroupId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> RoleId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> PermID, string Value, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> PurposeOfRoleId, string status, string ruleStartDate, string ruleEndDate, out int ConsentId, out ErrorCode errorCode) {
            object[] results = this.Invoke("UpdatePatientConsentPolicy", new object[] {
                        MPPID,
                        isNew,
                        patientConsentId,
                        GroupId,
                        RoleId,
                        PermID,
                        Value,
                        PurposeOfRoleId,
                        status,
                        ruleStartDate,
                        ruleEndDate});
            ConsentId = ((int)(results[1]));
            errorCode = ((ErrorCode)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UpdatePatientConsentPolicyAsync(string MPPID, string isNew, System.Nullable<int> patientConsentId, System.Nullable<int> GroupId, System.Nullable<int> RoleId, System.Nullable<int> PermID, string Value, System.Nullable<int> PurposeOfRoleId, string status, string ruleStartDate, string ruleEndDate) {
            this.UpdatePatientConsentPolicyAsync(MPPID, isNew, patientConsentId, GroupId, RoleId, PermID, Value, PurposeOfRoleId, status, ruleStartDate, ruleEndDate, null);
        }
        
        /// <remarks/>
        public void UpdatePatientConsentPolicyAsync(string MPPID, string isNew, System.Nullable<int> patientConsentId, System.Nullable<int> GroupId, System.Nullable<int> RoleId, System.Nullable<int> PermID, string Value, System.Nullable<int> PurposeOfRoleId, string status, string ruleStartDate, string ruleEndDate, object userState) {
            if ((this.UpdatePatientConsentPolicyOperationCompleted == null)) {
                this.UpdatePatientConsentPolicyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdatePatientConsentPolicyOperationCompleted);
            }
            this.InvokeAsync("UpdatePatientConsentPolicy", new object[] {
                        MPPID,
                        isNew,
                        patientConsentId,
                        GroupId,
                        RoleId,
                        PermID,
                        Value,
                        PurposeOfRoleId,
                        status,
                        ruleStartDate,
                        ruleEndDate}, this.UpdatePatientConsentPolicyOperationCompleted, userState);
        }
        
        private void OnUpdatePatientConsentPolicyOperationCompleted(object arg) {
            if ((this.UpdatePatientConsentPolicyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdatePatientConsentPolicyCompleted(this, new UpdatePatientConsentPolicyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchPermissionInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SearchPermissionInfo(string token, string permissionName, string permissionDesc, out ErrorCode errorCode) {
            object[] results = this.Invoke("SearchPermissionInfo", new object[] {
                        token,
                        permissionName,
                        permissionDesc});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SearchPermissionInfoAsync(string token, string permissionName, string permissionDesc) {
            this.SearchPermissionInfoAsync(token, permissionName, permissionDesc, null);
        }
        
        /// <remarks/>
        public void SearchPermissionInfoAsync(string token, string permissionName, string permissionDesc, object userState) {
            if ((this.SearchPermissionInfoOperationCompleted == null)) {
                this.SearchPermissionInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchPermissionInfoOperationCompleted);
            }
            this.InvokeAsync("SearchPermissionInfo", new object[] {
                        token,
                        permissionName,
                        permissionDesc}, this.SearchPermissionInfoOperationCompleted, userState);
        }
        
        private void OnSearchPermissionInfoOperationCompleted(object arg) {
            if ((this.SearchPermissionInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchPermissionInfoCompleted(this, new SearchPermissionInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CreatePermission", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CreatePermission(string token, int permissionId, string permissionName, string permissionDesc, out ErrorCode errorCode) {
            object[] results = this.Invoke("CreatePermission", new object[] {
                        token,
                        permissionId,
                        permissionName,
                        permissionDesc});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CreatePermissionAsync(string token, int permissionId, string permissionName, string permissionDesc) {
            this.CreatePermissionAsync(token, permissionId, permissionName, permissionDesc, null);
        }
        
        /// <remarks/>
        public void CreatePermissionAsync(string token, int permissionId, string permissionName, string permissionDesc, object userState) {
            if ((this.CreatePermissionOperationCompleted == null)) {
                this.CreatePermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePermissionOperationCompleted);
            }
            this.InvokeAsync("CreatePermission", new object[] {
                        token,
                        permissionId,
                        permissionName,
                        permissionDesc}, this.CreatePermissionOperationCompleted, userState);
        }
        
        private void OnCreatePermissionOperationCompleted(object arg) {
            if ((this.CreatePermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePermissionCompleted(this, new CreatePermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeletePermission", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeletePermission(string token, int permissionId, out ErrorCode errorCode) {
            object[] results = this.Invoke("DeletePermission", new object[] {
                        token,
                        permissionId});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeletePermissionAsync(string token, int permissionId) {
            this.DeletePermissionAsync(token, permissionId, null);
        }
        
        /// <remarks/>
        public void DeletePermissionAsync(string token, int permissionId, object userState) {
            if ((this.DeletePermissionOperationCompleted == null)) {
                this.DeletePermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePermissionOperationCompleted);
            }
            this.InvokeAsync("DeletePermission", new object[] {
                        token,
                        permissionId}, this.DeletePermissionOperationCompleted, userState);
        }
        
        private void OnDeletePermissionOperationCompleted(object arg) {
            if ((this.DeletePermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePermissionCompleted(this, new DeletePermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllServInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllServInfo(string token, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetAllServInfo", new object[] {
                        token});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllServInfoAsync(string token) {
            this.GetAllServInfoAsync(token, null);
        }
        
        /// <remarks/>
        public void GetAllServInfoAsync(string token, object userState) {
            if ((this.GetAllServInfoOperationCompleted == null)) {
                this.GetAllServInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllServInfoOperationCompleted);
            }
            this.InvokeAsync("GetAllServInfo", new object[] {
                        token}, this.GetAllServInfoOperationCompleted, userState);
        }
        
        private void OnGetAllServInfoOperationCompleted(object arg) {
            if ((this.GetAllServInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllServInfoCompleted(this, new GetAllServInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFacilityInfoPublish", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetFacilityInfoPublish(string token, int facilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetFacilityInfoPublish", new object[] {
                        token,
                        facilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacilityInfoPublishAsync(string token, int facilityId) {
            this.GetFacilityInfoPublishAsync(token, facilityId, null);
        }
        
        /// <remarks/>
        public void GetFacilityInfoPublishAsync(string token, int facilityId, object userState) {
            if ((this.GetFacilityInfoPublishOperationCompleted == null)) {
                this.GetFacilityInfoPublishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacilityInfoPublishOperationCompleted);
            }
            this.InvokeAsync("GetFacilityInfoPublish", new object[] {
                        token,
                        facilityId}, this.GetFacilityInfoPublishOperationCompleted, userState);
        }
        
        private void OnGetFacilityInfoPublishOperationCompleted(object arg) {
            if ((this.GetFacilityInfoPublishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacilityInfoPublishCompleted(this, new GetFacilityInfoPublishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFacilityInfoDetails", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetFacilityInfoDetails(string token, int facilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetFacilityInfoDetails", new object[] {
                        token,
                        facilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacilityInfoDetailsAsync(string token, int facilityId) {
            this.GetFacilityInfoDetailsAsync(token, facilityId, null);
        }
        
        /// <remarks/>
        public void GetFacilityInfoDetailsAsync(string token, int facilityId, object userState) {
            if ((this.GetFacilityInfoDetailsOperationCompleted == null)) {
                this.GetFacilityInfoDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacilityInfoDetailsOperationCompleted);
            }
            this.InvokeAsync("GetFacilityInfoDetails", new object[] {
                        token,
                        facilityId}, this.GetFacilityInfoDetailsOperationCompleted, userState);
        }
        
        private void OnGetFacilityInfoDetailsOperationCompleted(object arg) {
            if ((this.GetFacilityInfoDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacilityInfoDetailsCompleted(this, new GetFacilityInfoDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UpdateFacilityInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateFacilityInfo(string token, int FacilityID, string Name, string City, string Address1, string Address2, string State, string Zip, string Description, string Email, string NewImageLogo, string Contact, out ErrorCode errorCode) {
            object[] results = this.Invoke("UpdateFacilityInfo", new object[] {
                        token,
                        FacilityID,
                        Name,
                        City,
                        Address1,
                        Address2,
                        State,
                        Zip,
                        Description,
                        Email,
                        NewImageLogo,
                        Contact});
            errorCode = ((ErrorCode)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateFacilityInfoAsync(string token, int FacilityID, string Name, string City, string Address1, string Address2, string State, string Zip, string Description, string Email, string NewImageLogo, string Contact) {
            this.UpdateFacilityInfoAsync(token, FacilityID, Name, City, Address1, Address2, State, Zip, Description, Email, NewImageLogo, Contact, null);
        }
        
        /// <remarks/>
        public void UpdateFacilityInfoAsync(string token, int FacilityID, string Name, string City, string Address1, string Address2, string State, string Zip, string Description, string Email, string NewImageLogo, string Contact, object userState) {
            if ((this.UpdateFacilityInfoOperationCompleted == null)) {
                this.UpdateFacilityInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateFacilityInfoOperationCompleted);
            }
            this.InvokeAsync("UpdateFacilityInfo", new object[] {
                        token,
                        FacilityID,
                        Name,
                        City,
                        Address1,
                        Address2,
                        State,
                        Zip,
                        Description,
                        Email,
                        NewImageLogo,
                        Contact}, this.UpdateFacilityInfoOperationCompleted, userState);
        }
        
        private void OnUpdateFacilityInfoOperationCompleted(object arg) {
            if ((this.UpdateFacilityInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateFacilityInfoCompleted(this, new UpdateFacilityInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterServer", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RegisterServer(string token, int serverId, string uri, int port, string name, string adapterSrcPath, string adapterDestPath, out ErrorCode errorCode) {
            object[] results = this.Invoke("RegisterServer", new object[] {
                        token,
                        serverId,
                        uri,
                        port,
                        name,
                        adapterSrcPath,
                        adapterDestPath});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterServerAsync(string token, int serverId, string uri, int port, string name, string adapterSrcPath, string adapterDestPath) {
            this.RegisterServerAsync(token, serverId, uri, port, name, adapterSrcPath, adapterDestPath, null);
        }
        
        /// <remarks/>
        public void RegisterServerAsync(string token, int serverId, string uri, int port, string name, string adapterSrcPath, string adapterDestPath, object userState) {
            if ((this.RegisterServerOperationCompleted == null)) {
                this.RegisterServerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterServerOperationCompleted);
            }
            this.InvokeAsync("RegisterServer", new object[] {
                        token,
                        serverId,
                        uri,
                        port,
                        name,
                        adapterSrcPath,
                        adapterDestPath}, this.RegisterServerOperationCompleted, userState);
        }
        
        private void OnRegisterServerOperationCompleted(object arg) {
            if ((this.RegisterServerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterServerCompleted(this, new RegisterServerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAllEicInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAllEicInfo(string token, string eicGuid, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetAllEicInfo", new object[] {
                        token,
                        eicGuid});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllEicInfoAsync(string token, string eicGuid) {
            this.GetAllEicInfoAsync(token, eicGuid, null);
        }
        
        /// <remarks/>
        public void GetAllEicInfoAsync(string token, string eicGuid, object userState) {
            if ((this.GetAllEicInfoOperationCompleted == null)) {
                this.GetAllEicInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllEicInfoOperationCompleted);
            }
            this.InvokeAsync("GetAllEicInfo", new object[] {
                        token,
                        eicGuid}, this.GetAllEicInfoOperationCompleted, userState);
        }
        
        private void OnGetAllEicInfoOperationCompleted(object arg) {
            if ((this.GetAllEicInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllEicInfoCompleted(this, new GetAllEicInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SearchEicInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet SearchEicInfo(string token, string eicSerialId, string Name, out ErrorCode errorCode) {
            object[] results = this.Invoke("SearchEicInfo", new object[] {
                        token,
                        eicSerialId,
                        Name});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void SearchEicInfoAsync(string token, string eicSerialId, string Name) {
            this.SearchEicInfoAsync(token, eicSerialId, Name, null);
        }
        
        /// <remarks/>
        public void SearchEicInfoAsync(string token, string eicSerialId, string Name, object userState) {
            if ((this.SearchEicInfoOperationCompleted == null)) {
                this.SearchEicInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSearchEicInfoOperationCompleted);
            }
            this.InvokeAsync("SearchEicInfo", new object[] {
                        token,
                        eicSerialId,
                        Name}, this.SearchEicInfoOperationCompleted, userState);
        }
        
        private void OnSearchEicInfoOperationCompleted(object arg) {
            if ((this.SearchEicInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SearchEicInfoCompleted(this, new SearchEicInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/RegisterEic", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool RegisterEic(string token, string eicGuid, string eicSerialId, string eicName, string description, bool isAssigned, string userGuid, string unit, out int checkSerialId, out ErrorCode errorCode) {
            object[] results = this.Invoke("RegisterEic", new object[] {
                        token,
                        eicGuid,
                        eicSerialId,
                        eicName,
                        description,
                        isAssigned,
                        userGuid,
                        unit});
            checkSerialId = ((int)(results[1]));
            errorCode = ((ErrorCode)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void RegisterEicAsync(string token, string eicGuid, string eicSerialId, string eicName, string description, bool isAssigned, string userGuid, string unit) {
            this.RegisterEicAsync(token, eicGuid, eicSerialId, eicName, description, isAssigned, userGuid, unit, null);
        }
        
        /// <remarks/>
        public void RegisterEicAsync(string token, string eicGuid, string eicSerialId, string eicName, string description, bool isAssigned, string userGuid, string unit, object userState) {
            if ((this.RegisterEicOperationCompleted == null)) {
                this.RegisterEicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRegisterEicOperationCompleted);
            }
            this.InvokeAsync("RegisterEic", new object[] {
                        token,
                        eicGuid,
                        eicSerialId,
                        eicName,
                        description,
                        isAssigned,
                        userGuid,
                        unit}, this.RegisterEicOperationCompleted, userState);
        }
        
        private void OnRegisterEicOperationCompleted(object arg) {
            if ((this.RegisterEicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RegisterEicCompleted(this, new RegisterEicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckPatientConsentPolicyExistence", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckPatientConsentPolicyExistence(string token, string MPIID, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> GroupId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> RoleId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<int> PurposeOfUseId, out int checkConsentExistence, out ErrorCode errorCode) {
            object[] results = this.Invoke("CheckPatientConsentPolicyExistence", new object[] {
                        token,
                        MPIID,
                        GroupId,
                        RoleId,
                        PurposeOfUseId});
            checkConsentExistence = ((int)(results[1]));
            errorCode = ((ErrorCode)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckPatientConsentPolicyExistenceAsync(string token, string MPIID, System.Nullable<int> GroupId, System.Nullable<int> RoleId, System.Nullable<int> PurposeOfUseId) {
            this.CheckPatientConsentPolicyExistenceAsync(token, MPIID, GroupId, RoleId, PurposeOfUseId, null);
        }
        
        /// <remarks/>
        public void CheckPatientConsentPolicyExistenceAsync(string token, string MPIID, System.Nullable<int> GroupId, System.Nullable<int> RoleId, System.Nullable<int> PurposeOfUseId, object userState) {
            if ((this.CheckPatientConsentPolicyExistenceOperationCompleted == null)) {
                this.CheckPatientConsentPolicyExistenceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckPatientConsentPolicyExistenceOperationCompleted);
            }
            this.InvokeAsync("CheckPatientConsentPolicyExistence", new object[] {
                        token,
                        MPIID,
                        GroupId,
                        RoleId,
                        PurposeOfUseId}, this.CheckPatientConsentPolicyExistenceOperationCompleted, userState);
        }
        
        private void OnCheckPatientConsentPolicyExistenceOperationCompleted(object arg) {
            if ((this.CheckPatientConsentPolicyExistenceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckPatientConsentPolicyExistenceCompleted(this, new CheckPatientConsentPolicyExistenceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteEic", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteEic(string token, string eicGuid, out ErrorCode errorCode) {
            object[] results = this.Invoke("DeleteEic", new object[] {
                        token,
                        eicGuid});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteEicAsync(string token, string eicGuid) {
            this.DeleteEicAsync(token, eicGuid, null);
        }
        
        /// <remarks/>
        public void DeleteEicAsync(string token, string eicGuid, object userState) {
            if ((this.DeleteEicOperationCompleted == null)) {
                this.DeleteEicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteEicOperationCompleted);
            }
            this.InvokeAsync("DeleteEic", new object[] {
                        token,
                        eicGuid}, this.DeleteEicOperationCompleted, userState);
        }
        
        private void OnDeleteEicOperationCompleted(object arg) {
            if ((this.DeleteEicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteEicCompleted(this, new DeleteEicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckRegisterEIC", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckRegisterEIC(string eicSerialID, out ErrorCode errorCode) {
            object[] results = this.Invoke("CheckRegisterEIC", new object[] {
                        eicSerialID});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckRegisterEICAsync(string eicSerialID) {
            this.CheckRegisterEICAsync(eicSerialID, null);
        }
        
        /// <remarks/>
        public void CheckRegisterEICAsync(string eicSerialID, object userState) {
            if ((this.CheckRegisterEICOperationCompleted == null)) {
                this.CheckRegisterEICOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckRegisterEICOperationCompleted);
            }
            this.InvokeAsync("CheckRegisterEIC", new object[] {
                        eicSerialID}, this.CheckRegisterEICOperationCompleted, userState);
        }
        
        private void OnCheckRegisterEICOperationCompleted(object arg) {
            if ((this.CheckRegisterEICCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckRegisterEICCompleted(this, new CheckRegisterEICCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FillDropDown", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet FillDropDown(int dropDownType, int userTypeId, int facilityId, string eicGuid) {
            object[] results = this.Invoke("FillDropDown", new object[] {
                        dropDownType,
                        userTypeId,
                        facilityId,
                        eicGuid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void FillDropDownAsync(int dropDownType, int userTypeId, int facilityId, string eicGuid) {
            this.FillDropDownAsync(dropDownType, userTypeId, facilityId, eicGuid, null);
        }
        
        /// <remarks/>
        public void FillDropDownAsync(int dropDownType, int userTypeId, int facilityId, string eicGuid, object userState) {
            if ((this.FillDropDownOperationCompleted == null)) {
                this.FillDropDownOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFillDropDownOperationCompleted);
            }
            this.InvokeAsync("FillDropDown", new object[] {
                        dropDownType,
                        userTypeId,
                        facilityId,
                        eicGuid}, this.FillDropDownOperationCompleted, userState);
        }
        
        private void OnFillDropDownOperationCompleted(object arg) {
            if ((this.FillDropDownCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FillDropDownCompleted(this, new FillDropDownCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetFacilityInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetFacilityInfo(string token, int facilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetFacilityInfo", new object[] {
                        token,
                        facilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetFacilityInfoAsync(string token, int facilityId) {
            this.GetFacilityInfoAsync(token, facilityId, null);
        }
        
        /// <remarks/>
        public void GetFacilityInfoAsync(string token, int facilityId, object userState) {
            if ((this.GetFacilityInfoOperationCompleted == null)) {
                this.GetFacilityInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFacilityInfoOperationCompleted);
            }
            this.InvokeAsync("GetFacilityInfo", new object[] {
                        token,
                        facilityId}, this.GetFacilityInfoOperationCompleted, userState);
        }
        
        private void OnGetFacilityInfoOperationCompleted(object arg) {
            if ((this.GetFacilityInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFacilityInfoCompleted(this, new GetFacilityInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatient911Xml", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPatient911Xml(string patientID, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetPatient911Xml", new object[] {
                        patientID});
            errorCode = ((ErrorCode)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatient911XmlAsync(string patientID) {
            this.GetPatient911XmlAsync(patientID, null);
        }
        
        /// <remarks/>
        public void GetPatient911XmlAsync(string patientID, object userState) {
            if ((this.GetPatient911XmlOperationCompleted == null)) {
                this.GetPatient911XmlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatient911XmlOperationCompleted);
            }
            this.InvokeAsync("GetPatient911Xml", new object[] {
                        patientID}, this.GetPatient911XmlOperationCompleted, userState);
        }
        
        private void OnGetPatient911XmlOperationCompleted(object arg) {
            if ((this.GetPatient911XmlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatient911XmlCompleted(this, new GetPatient911XmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetAssociatedFacilityInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetAssociatedFacilityInfo(string token, int facilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetAssociatedFacilityInfo", new object[] {
                        token,
                        facilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetAssociatedFacilityInfoAsync(string token, int facilityId) {
            this.GetAssociatedFacilityInfoAsync(token, facilityId, null);
        }
        
        /// <remarks/>
        public void GetAssociatedFacilityInfoAsync(string token, int facilityId, object userState) {
            if ((this.GetAssociatedFacilityInfoOperationCompleted == null)) {
                this.GetAssociatedFacilityInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAssociatedFacilityInfoOperationCompleted);
            }
            this.InvokeAsync("GetAssociatedFacilityInfo", new object[] {
                        token,
                        facilityId}, this.GetAssociatedFacilityInfoOperationCompleted, userState);
        }
        
        private void OnGetAssociatedFacilityInfoOperationCompleted(object arg) {
            if ((this.GetAssociatedFacilityInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAssociatedFacilityInfoCompleted(this, new GetAssociatedFacilityInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteDocumentByPatientId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteDocumentByPatientId(string PatientId, out ErrorCode errorCode) {
            object[] results = this.Invoke("DeleteDocumentByPatientId", new object[] {
                        PatientId});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteDocumentByPatientIdAsync(string PatientId) {
            this.DeleteDocumentByPatientIdAsync(PatientId, null);
        }
        
        /// <remarks/>
        public void DeleteDocumentByPatientIdAsync(string PatientId, object userState) {
            if ((this.DeleteDocumentByPatientIdOperationCompleted == null)) {
                this.DeleteDocumentByPatientIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteDocumentByPatientIdOperationCompleted);
            }
            this.InvokeAsync("DeleteDocumentByPatientId", new object[] {
                        PatientId}, this.DeleteDocumentByPatientIdOperationCompleted, userState);
        }
        
        private void OnDeleteDocumentByPatientIdOperationCompleted(object arg) {
            if ((this.DeleteDocumentByPatientIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteDocumentByPatientIdCompleted(this, new DeleteDocumentByPatientIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteSharingByPatientId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteSharingByPatientId(string PatientId, out ErrorCode errorCode) {
            object[] results = this.Invoke("DeleteSharingByPatientId", new object[] {
                        PatientId});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSharingByPatientIdAsync(string PatientId) {
            this.DeleteSharingByPatientIdAsync(PatientId, null);
        }
        
        /// <remarks/>
        public void DeleteSharingByPatientIdAsync(string PatientId, object userState) {
            if ((this.DeleteSharingByPatientIdOperationCompleted == null)) {
                this.DeleteSharingByPatientIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSharingByPatientIdOperationCompleted);
            }
            this.InvokeAsync("DeleteSharingByPatientId", new object[] {
                        PatientId}, this.DeleteSharingByPatientIdOperationCompleted, userState);
        }
        
        private void OnDeleteSharingByPatientIdOperationCompleted(object arg) {
            if ((this.DeleteSharingByPatientIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSharingByPatientIdCompleted(this, new DeleteSharingByPatientIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FacilityAssociate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FacilityAssociate(string token, int sourceFacilityId, int targetFacilityId, int permissionTypeId, string categoryId, string ExpiryDate, string targetFacilityPublicKey, out ErrorCode errorCode) {
            object[] results = this.Invoke("FacilityAssociate", new object[] {
                        token,
                        sourceFacilityId,
                        targetFacilityId,
                        permissionTypeId,
                        categoryId,
                        ExpiryDate,
                        targetFacilityPublicKey});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FacilityAssociateAsync(string token, int sourceFacilityId, int targetFacilityId, int permissionTypeId, string categoryId, string ExpiryDate, string targetFacilityPublicKey) {
            this.FacilityAssociateAsync(token, sourceFacilityId, targetFacilityId, permissionTypeId, categoryId, ExpiryDate, targetFacilityPublicKey, null);
        }
        
        /// <remarks/>
        public void FacilityAssociateAsync(string token, int sourceFacilityId, int targetFacilityId, int permissionTypeId, string categoryId, string ExpiryDate, string targetFacilityPublicKey, object userState) {
            if ((this.FacilityAssociateOperationCompleted == null)) {
                this.FacilityAssociateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFacilityAssociateOperationCompleted);
            }
            this.InvokeAsync("FacilityAssociate", new object[] {
                        token,
                        sourceFacilityId,
                        targetFacilityId,
                        permissionTypeId,
                        categoryId,
                        ExpiryDate,
                        targetFacilityPublicKey}, this.FacilityAssociateOperationCompleted, userState);
        }
        
        private void OnFacilityAssociateOperationCompleted(object arg) {
            if ((this.FacilityAssociateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FacilityAssociateCompleted(this, new FacilityAssociateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DissociateFacility", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DissociateFacility(string token, int sourceFacilityId, string targetFacilityId, out ErrorCode errorCode) {
            object[] results = this.Invoke("DissociateFacility", new object[] {
                        token,
                        sourceFacilityId,
                        targetFacilityId});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DissociateFacilityAsync(string token, int sourceFacilityId, string targetFacilityId) {
            this.DissociateFacilityAsync(token, sourceFacilityId, targetFacilityId, null);
        }
        
        /// <remarks/>
        public void DissociateFacilityAsync(string token, int sourceFacilityId, string targetFacilityId, object userState) {
            if ((this.DissociateFacilityOperationCompleted == null)) {
                this.DissociateFacilityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDissociateFacilityOperationCompleted);
            }
            this.InvokeAsync("DissociateFacility", new object[] {
                        token,
                        sourceFacilityId,
                        targetFacilityId}, this.DissociateFacilityOperationCompleted, userState);
        }
        
        private void OnDissociateFacilityOperationCompleted(object arg) {
            if ((this.DissociateFacilityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DissociateFacilityCompleted(this, new DissociateFacilityCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CategoryAssociation", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CategoryAssociation(string token, int sourceFacilityId, int targetFacilityId, int permissionTypeId, int categoryId, out ErrorCode errorCode) {
            object[] results = this.Invoke("CategoryAssociation", new object[] {
                        token,
                        sourceFacilityId,
                        targetFacilityId,
                        permissionTypeId,
                        categoryId});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CategoryAssociationAsync(string token, int sourceFacilityId, int targetFacilityId, int permissionTypeId, int categoryId) {
            this.CategoryAssociationAsync(token, sourceFacilityId, targetFacilityId, permissionTypeId, categoryId, null);
        }
        
        /// <remarks/>
        public void CategoryAssociationAsync(string token, int sourceFacilityId, int targetFacilityId, int permissionTypeId, int categoryId, object userState) {
            if ((this.CategoryAssociationOperationCompleted == null)) {
                this.CategoryAssociationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCategoryAssociationOperationCompleted);
            }
            this.InvokeAsync("CategoryAssociation", new object[] {
                        token,
                        sourceFacilityId,
                        targetFacilityId,
                        permissionTypeId,
                        categoryId}, this.CategoryAssociationOperationCompleted, userState);
        }
        
        private void OnCategoryAssociationOperationCompleted(object arg) {
            if ((this.CategoryAssociationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CategoryAssociationCompleted(this, new CategoryAssociationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPatientInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPatientInfo(string token, string patientID, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetPatientInfo", new object[] {
                        token,
                        patientID});
            errorCode = ((ErrorCode)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPatientInfoAsync(string token, string patientID) {
            this.GetPatientInfoAsync(token, patientID, null);
        }
        
        /// <remarks/>
        public void GetPatientInfoAsync(string token, string patientID, object userState) {
            if ((this.GetPatientInfoOperationCompleted == null)) {
                this.GetPatientInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPatientInfoOperationCompleted);
            }
            this.InvokeAsync("GetPatientInfo", new object[] {
                        token,
                        patientID}, this.GetPatientInfoOperationCompleted, userState);
        }
        
        private void OnGetPatientInfoOperationCompleted(object arg) {
            if ((this.GetPatientInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPatientInfoCompleted(this, new GetPatientInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDeviceInfo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetDeviceInfo(string token, string EICSerialID, out string serverPubKey, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetDeviceInfo", new object[] {
                        token,
                        EICSerialID});
            serverPubKey = ((string)(results[1]));
            errorCode = ((ErrorCode)(results[2]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetDeviceInfoAsync(string token, string EICSerialID) {
            this.GetDeviceInfoAsync(token, EICSerialID, null);
        }
        
        /// <remarks/>
        public void GetDeviceInfoAsync(string token, string EICSerialID, object userState) {
            if ((this.GetDeviceInfoOperationCompleted == null)) {
                this.GetDeviceInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeviceInfoOperationCompleted);
            }
            this.InvokeAsync("GetDeviceInfo", new object[] {
                        token,
                        EICSerialID}, this.GetDeviceInfoOperationCompleted, userState);
        }
        
        private void OnGetDeviceInfoOperationCompleted(object arg) {
            if ((this.GetDeviceInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeviceInfoCompleted(this, new GetDeviceInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/VerifyEic", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int VerifyEic(string token, string PatientID, string EICSerialID, string EicName, string Description, bool RegisterDevice, out ErrorCode errorCode) {
            object[] results = this.Invoke("VerifyEic", new object[] {
                        token,
                        PatientID,
                        EICSerialID,
                        EicName,
                        Description,
                        RegisterDevice});
            errorCode = ((ErrorCode)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyEicAsync(string token, string PatientID, string EICSerialID, string EicName, string Description, bool RegisterDevice) {
            this.VerifyEicAsync(token, PatientID, EICSerialID, EicName, Description, RegisterDevice, null);
        }
        
        /// <remarks/>
        public void VerifyEicAsync(string token, string PatientID, string EICSerialID, string EicName, string Description, bool RegisterDevice, object userState) {
            if ((this.VerifyEicOperationCompleted == null)) {
                this.VerifyEicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyEicOperationCompleted);
            }
            this.InvokeAsync("VerifyEic", new object[] {
                        token,
                        PatientID,
                        EICSerialID,
                        EicName,
                        Description,
                        RegisterDevice}, this.VerifyEicOperationCompleted, userState);
        }
        
        private void OnVerifyEicOperationCompleted(object arg) {
            if ((this.VerifyEicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyEicCompleted(this, new VerifyEicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/UnRegisterEic", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UnRegisterEic(string token, string PatientID, out ErrorCode errCode) {
            object[] results = this.Invoke("UnRegisterEic", new object[] {
                        token,
                        PatientID});
            errCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void UnRegisterEicAsync(string token, string PatientID) {
            this.UnRegisterEicAsync(token, PatientID, null);
        }
        
        /// <remarks/>
        public void UnRegisterEicAsync(string token, string PatientID, object userState) {
            if ((this.UnRegisterEicOperationCompleted == null)) {
                this.UnRegisterEicOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUnRegisterEicOperationCompleted);
            }
            this.InvokeAsync("UnRegisterEic", new object[] {
                        token,
                        PatientID}, this.UnRegisterEicOperationCompleted, userState);
        }
        
        private void OnUnRegisterEicOperationCompleted(object arg) {
            if ((this.UnRegisterEicCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UnRegisterEicCompleted(this, new UnRegisterEicCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetServerKey", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerKey(string token, string serverUri, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetServerKey", new object[] {
                        token,
                        serverUri});
            errorCode = ((ErrorCode)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetServerKeyAsync(string token, string serverUri) {
            this.GetServerKeyAsync(token, serverUri, null);
        }
        
        /// <remarks/>
        public void GetServerKeyAsync(string token, string serverUri, object userState) {
            if ((this.GetServerKeyOperationCompleted == null)) {
                this.GetServerKeyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServerKeyOperationCompleted);
            }
            this.InvokeAsync("GetServerKey", new object[] {
                        token,
                        serverUri}, this.GetServerKeyOperationCompleted, userState);
        }
        
        private void OnGetServerKeyOperationCompleted(object arg) {
            if ((this.GetServerKeyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServerKeyCompleted(this, new GetServerKeyCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get911DataType", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Get911DataType(string token, out ErrorCode errorCode) {
            object[] results = this.Invoke("Get911DataType", new object[] {
                        token});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Get911DataTypeAsync(string token) {
            this.Get911DataTypeAsync(token, null);
        }
        
        /// <remarks/>
        public void Get911DataTypeAsync(string token, object userState) {
            if ((this.Get911DataTypeOperationCompleted == null)) {
                this.Get911DataTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet911DataTypeOperationCompleted);
            }
            this.InvokeAsync("Get911DataType", new object[] {
                        token}, this.Get911DataTypeOperationCompleted, userState);
        }
        
        private void OnGet911DataTypeOperationCompleted(object arg) {
            if ((this.Get911DataTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get911DataTypeCompleted(this, new Get911DataTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get911Fields", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Get911Fields(string token, out ErrorCode errorCode) {
            object[] results = this.Invoke("Get911Fields", new object[] {
                        token});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Get911FieldsAsync(string token) {
            this.Get911FieldsAsync(token, null);
        }
        
        /// <remarks/>
        public void Get911FieldsAsync(string token, object userState) {
            if ((this.Get911FieldsOperationCompleted == null)) {
                this.Get911FieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet911FieldsOperationCompleted);
            }
            this.InvokeAsync("Get911Fields", new object[] {
                        token}, this.Get911FieldsOperationCompleted, userState);
        }
        
        private void OnGet911FieldsOperationCompleted(object arg) {
            if ((this.Get911FieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get911FieldsCompleted(this, new Get911FieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Get911Category", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet Get911Category(string token, out ErrorCode errorCode) {
            object[] results = this.Invoke("Get911Category", new object[] {
                        token});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void Get911CategoryAsync(string token) {
            this.Get911CategoryAsync(token, null);
        }
        
        /// <remarks/>
        public void Get911CategoryAsync(string token, object userState) {
            if ((this.Get911CategoryOperationCompleted == null)) {
                this.Get911CategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGet911CategoryOperationCompleted);
            }
            this.InvokeAsync("Get911Category", new object[] {
                        token}, this.Get911CategoryOperationCompleted, userState);
        }
        
        private void OnGet911CategoryOperationCompleted(object arg) {
            if ((this.Get911CategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Get911CategoryCompleted(this, new Get911CategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetCategoryField911", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetCategoryField911(int FieldID, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetCategoryField911", new object[] {
                        FieldID});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetCategoryField911Async(int FieldID) {
            this.GetCategoryField911Async(FieldID, null);
        }
        
        /// <remarks/>
        public void GetCategoryField911Async(int FieldID, object userState) {
            if ((this.GetCategoryField911OperationCompleted == null)) {
                this.GetCategoryField911OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCategoryField911OperationCompleted);
            }
            this.InvokeAsync("GetCategoryField911", new object[] {
                        FieldID}, this.GetCategoryField911OperationCompleted, userState);
        }
        
        private void OnGetCategoryField911OperationCompleted(object arg) {
            if ((this.GetCategoryField911Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCategoryField911Completed(this, new GetCategoryField911CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddCategoryField911", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddCategoryField911(int FieldId, string Name, string Type, string FieldName, string FieldType, out ErrorCode errorCode) {
            object[] results = this.Invoke("AddCategoryField911", new object[] {
                        FieldId,
                        Name,
                        Type,
                        FieldName,
                        FieldType});
            errorCode = ((ErrorCode)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddCategoryField911Async(int FieldId, string Name, string Type, string FieldName, string FieldType) {
            this.AddCategoryField911Async(FieldId, Name, Type, FieldName, FieldType, null);
        }
        
        /// <remarks/>
        public void AddCategoryField911Async(int FieldId, string Name, string Type, string FieldName, string FieldType, object userState) {
            if ((this.AddCategoryField911OperationCompleted == null)) {
                this.AddCategoryField911OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCategoryField911OperationCompleted);
            }
            this.InvokeAsync("AddCategoryField911", new object[] {
                        FieldId,
                        Name,
                        Type,
                        FieldName,
                        FieldType}, this.AddCategoryField911OperationCompleted, userState);
        }
        
        private void OnAddCategoryField911OperationCompleted(object arg) {
            if ((this.AddCategoryField911Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCategoryField911Completed(this, new AddCategoryField911CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DeleteCategoryField911", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteCategoryField911(int FieldId, int CategoryId, string CategoryFieldName, out ErrorCode errorCode) {
            object[] results = this.Invoke("DeleteCategoryField911", new object[] {
                        FieldId,
                        CategoryId,
                        CategoryFieldName});
            errorCode = ((ErrorCode)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteCategoryField911Async(int FieldId, int CategoryId, string CategoryFieldName) {
            this.DeleteCategoryField911Async(FieldId, CategoryId, CategoryFieldName, null);
        }
        
        /// <remarks/>
        public void DeleteCategoryField911Async(int FieldId, int CategoryId, string CategoryFieldName, object userState) {
            if ((this.DeleteCategoryField911OperationCompleted == null)) {
                this.DeleteCategoryField911OperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCategoryField911OperationCompleted);
            }
            this.InvokeAsync("DeleteCategoryField911", new object[] {
                        FieldId,
                        CategoryId,
                        CategoryFieldName}, this.DeleteCategoryField911OperationCompleted, userState);
        }
        
        private void OnDeleteCategoryField911OperationCompleted(object arg) {
            if ((this.DeleteCategoryField911Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCategoryField911Completed(this, new DeleteCategoryField911CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update911Fields", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("errorCode")]
        public ErrorCode Update911Fields(System.Data.DataSet dsFields, string token) {
            object[] results = this.Invoke("Update911Fields", new object[] {
                        dsFields,
                        token});
            return ((ErrorCode)(results[0]));
        }
        
        /// <remarks/>
        public void Update911FieldsAsync(System.Data.DataSet dsFields, string token) {
            this.Update911FieldsAsync(dsFields, token, null);
        }
        
        /// <remarks/>
        public void Update911FieldsAsync(System.Data.DataSet dsFields, string token, object userState) {
            if ((this.Update911FieldsOperationCompleted == null)) {
                this.Update911FieldsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate911FieldsOperationCompleted);
            }
            this.InvokeAsync("Update911Fields", new object[] {
                        dsFields,
                        token}, this.Update911FieldsOperationCompleted, userState);
        }
        
        private void OnUpdate911FieldsOperationCompleted(object arg) {
            if ((this.Update911FieldsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update911FieldsCompleted(this, new Update911FieldsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Update911Category", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("errorCode")]
        public ErrorCode Update911Category(System.Data.DataSet dsCategory, string token) {
            object[] results = this.Invoke("Update911Category", new object[] {
                        dsCategory,
                        token});
            return ((ErrorCode)(results[0]));
        }
        
        /// <remarks/>
        public void Update911CategoryAsync(System.Data.DataSet dsCategory, string token) {
            this.Update911CategoryAsync(dsCategory, token, null);
        }
        
        /// <remarks/>
        public void Update911CategoryAsync(System.Data.DataSet dsCategory, string token, object userState) {
            if ((this.Update911CategoryOperationCompleted == null)) {
                this.Update911CategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdate911CategoryOperationCompleted);
            }
            this.InvokeAsync("Update911Category", new object[] {
                        dsCategory,
                        token}, this.Update911CategoryOperationCompleted, userState);
        }
        
        private void OnUpdate911CategoryOperationCompleted(object arg) {
            if ((this.Update911CategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Update911CategoryCompleted(this, new Update911CategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetUserInformation911", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetUserInformation911(string UserGUID, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetUserInformation911", new object[] {
                        UserGUID});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserInformation911Async(string UserGUID) {
            this.GetUserInformation911Async(UserGUID, null);
        }
        
        /// <remarks/>
        public void GetUserInformation911Async(string UserGUID, object userState) {
            if ((this.GetUserInformation911OperationCompleted == null)) {
                this.GetUserInformation911OperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserInformation911OperationCompleted);
            }
            this.InvokeAsync("GetUserInformation911", new object[] {
                        UserGUID}, this.GetUserInformation911OperationCompleted, userState);
        }
        
        private void OnGetUserInformation911OperationCompleted(object arg) {
            if ((this.GetUserInformation911Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserInformation911Completed(this, new GetUserInformation911CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddInformation911", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddInformation911(string UserGUID, string FieldData911, string FieldData911Schema, string CategoryData911, string CategoryData911Schema, out ErrorCode errorCode) {
            object[] results = this.Invoke("AddInformation911", new object[] {
                        UserGUID,
                        FieldData911,
                        FieldData911Schema,
                        CategoryData911,
                        CategoryData911Schema});
            errorCode = ((ErrorCode)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddInformation911Async(string UserGUID, string FieldData911, string FieldData911Schema, string CategoryData911, string CategoryData911Schema) {
            this.AddInformation911Async(UserGUID, FieldData911, FieldData911Schema, CategoryData911, CategoryData911Schema, null);
        }
        
        /// <remarks/>
        public void AddInformation911Async(string UserGUID, string FieldData911, string FieldData911Schema, string CategoryData911, string CategoryData911Schema, object userState) {
            if ((this.AddInformation911OperationCompleted == null)) {
                this.AddInformation911OperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddInformation911OperationCompleted);
            }
            this.InvokeAsync("AddInformation911", new object[] {
                        UserGUID,
                        FieldData911,
                        FieldData911Schema,
                        CategoryData911,
                        CategoryData911Schema}, this.AddInformation911OperationCompleted, userState);
        }
        
        private void OnAddInformation911OperationCompleted(object arg) {
            if ((this.AddInformation911Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddInformation911Completed(this, new AddInformation911CompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/SaveC32Document", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SaveC32Document([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] docBinaryArray, string strDocFileName, string PatientId, string UploadedBy, string OriginalDocumentID, int DocumentType, out ErrorCode errorCode) {
            object[] results = this.Invoke("SaveC32Document", new object[] {
                        docBinaryArray,
                        strDocFileName,
                        PatientId,
                        UploadedBy,
                        OriginalDocumentID,
                        DocumentType});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void SaveC32DocumentAsync(byte[] docBinaryArray, string strDocFileName, string PatientId, string UploadedBy, string OriginalDocumentID, int DocumentType) {
            this.SaveC32DocumentAsync(docBinaryArray, strDocFileName, PatientId, UploadedBy, OriginalDocumentID, DocumentType, null);
        }
        
        /// <remarks/>
        public void SaveC32DocumentAsync(byte[] docBinaryArray, string strDocFileName, string PatientId, string UploadedBy, string OriginalDocumentID, int DocumentType, object userState) {
            if ((this.SaveC32DocumentOperationCompleted == null)) {
                this.SaveC32DocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveC32DocumentOperationCompleted);
            }
            this.InvokeAsync("SaveC32Document", new object[] {
                        docBinaryArray,
                        strDocFileName,
                        PatientId,
                        UploadedBy,
                        OriginalDocumentID,
                        DocumentType}, this.SaveC32DocumentOperationCompleted, userState);
        }
        
        private void OnSaveC32DocumentOperationCompleted(object arg) {
            if ((this.SaveC32DocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveC32DocumentCompleted(this, new SaveC32DocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AddAttachment", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AddAttachment([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] ImageBinaryArray, string strDocFileName, string PatientId, string Description, out ErrorCode errorCode) {
            object[] results = this.Invoke("AddAttachment", new object[] {
                        ImageBinaryArray,
                        strDocFileName,
                        PatientId,
                        Description});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AddAttachmentAsync(byte[] ImageBinaryArray, string strDocFileName, string PatientId, string Description) {
            this.AddAttachmentAsync(ImageBinaryArray, strDocFileName, PatientId, Description, null);
        }
        
        /// <remarks/>
        public void AddAttachmentAsync(byte[] ImageBinaryArray, string strDocFileName, string PatientId, string Description, object userState) {
            if ((this.AddAttachmentOperationCompleted == null)) {
                this.AddAttachmentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddAttachmentOperationCompleted);
            }
            this.InvokeAsync("AddAttachment", new object[] {
                        ImageBinaryArray,
                        strDocFileName,
                        PatientId,
                        Description}, this.AddAttachmentOperationCompleted, userState);
        }
        
        private void OnAddAttachmentOperationCompleted(object arg) {
            if ((this.AddAttachmentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddAttachmentCompleted(this, new AddAttachmentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ShareToNewProvider", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ShareToNewProvider(string SharedDocumentID, string OriginalDocumentID, int ConfidentialityCode, string RuleStartDate, string RuleEndDate, string ProviderEmail, int ProviderRole, int OrganizationID, int HomeCommunityID, int PurposeForUse, string EffectiveTime, string Images, out ErrorCode errorCode) {
            object[] results = this.Invoke("ShareToNewProvider", new object[] {
                        SharedDocumentID,
                        OriginalDocumentID,
                        ConfidentialityCode,
                        RuleStartDate,
                        RuleEndDate,
                        ProviderEmail,
                        ProviderRole,
                        OrganizationID,
                        HomeCommunityID,
                        PurposeForUse,
                        EffectiveTime,
                        Images});
            errorCode = ((ErrorCode)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void ShareToNewProviderAsync(string SharedDocumentID, string OriginalDocumentID, int ConfidentialityCode, string RuleStartDate, string RuleEndDate, string ProviderEmail, int ProviderRole, int OrganizationID, int HomeCommunityID, int PurposeForUse, string EffectiveTime, string Images) {
            this.ShareToNewProviderAsync(SharedDocumentID, OriginalDocumentID, ConfidentialityCode, RuleStartDate, RuleEndDate, ProviderEmail, ProviderRole, OrganizationID, HomeCommunityID, PurposeForUse, EffectiveTime, Images, null);
        }
        
        /// <remarks/>
        public void ShareToNewProviderAsync(string SharedDocumentID, string OriginalDocumentID, int ConfidentialityCode, string RuleStartDate, string RuleEndDate, string ProviderEmail, int ProviderRole, int OrganizationID, int HomeCommunityID, int PurposeForUse, string EffectiveTime, string Images, object userState) {
            if ((this.ShareToNewProviderOperationCompleted == null)) {
                this.ShareToNewProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnShareToNewProviderOperationCompleted);
            }
            this.InvokeAsync("ShareToNewProvider", new object[] {
                        SharedDocumentID,
                        OriginalDocumentID,
                        ConfidentialityCode,
                        RuleStartDate,
                        RuleEndDate,
                        ProviderEmail,
                        ProviderRole,
                        OrganizationID,
                        HomeCommunityID,
                        PurposeForUse,
                        EffectiveTime,
                        Images}, this.ShareToNewProviderOperationCompleted, userState);
        }
        
        private void OnShareToNewProviderOperationCompleted(object arg) {
            if ((this.ShareToNewProviderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ShareToNewProviderCompleted(this, new ShareToNewProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetDocumentByPatientId", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetDocumentByPatientId(string PatientId, out ErrorCode errorCode) {
            object[] results = this.Invoke("GetDocumentByPatientId", new object[] {
                        PatientId});
            errorCode = ((ErrorCode)(results[1]));
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetDocumentByPatientIdAsync(string PatientId) {
            this.GetDocumentByPatientIdAsync(PatientId, null);
        }
        
        /// <remarks/>
        public void GetDocumentByPatientIdAsync(string PatientId, object userState) {
            if ((this.GetDocumentByPatientIdOperationCompleted == null)) {
                this.GetDocumentByPatientIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDocumentByPatientIdOperationCompleted);
            }
            this.InvokeAsync("GetDocumentByPatientId", new object[] {
                        PatientId}, this.GetDocumentByPatientIdOperationCompleted, userState);
        }
        
        private void OnGetDocumentByPatientIdOperationCompleted(object arg) {
            if ((this.GetDocumentByPatientIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDocumentByPatientIdCompleted(this, new GetDocumentByPatientIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.233")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://tempuri.org/")]
    public enum ErrorCode {
        
        /// <remarks/>
        ErrorSuccess,
        
        /// <remarks/>
        FileNotFound,
        
        /// <remarks/>
        RecordNotFound,
        
        /// <remarks/>
        LicenseNotFound,
        
        /// <remarks/>
        DeviceNotConfigured,
        
        /// <remarks/>
        InvalidParam,
        
        /// <remarks/>
        NotSupported,
        
        /// <remarks/>
        UserNotFound,
        
        /// <remarks/>
        UserNotLoggedIn,
        
        /// <remarks/>
        DeviceAlreadyConfigured,
        
        /// <remarks/>
        SoftwareNotConfigured,
        
        /// <remarks/>
        AccessDenied,
        
        /// <remarks/>
        InvalidSignature,
        
        /// <remarks/>
        InvalidPassword,
        
        /// <remarks/>
        ErrorUnknown,
        
        /// <remarks/>
        DeviceNotAnEIC,
        
        /// <remarks/>
        RepositoryNotUpdated,
        
        /// <remarks/>
        EICNotPluggedIn,
        
        /// <remarks/>
        InvalidServerResponse,
        
        /// <remarks/>
        ErrorReadRegistry,
        
        /// <remarks/>
        ErrorWriteRegistry,
        
        /// <remarks/>
        ErrorOpenRegistry,
        
        /// <remarks/>
        PathNotFound,
        
        /// <remarks/>
        InvaidLoginCredential,
        
        /// <remarks/>
        FailDbInstance,
        
        /// <remarks/>
        AlreadyExist,
        
        /// <remarks/>
        FailToCreateToken,
        
        /// <remarks/>
        UnknownException,
        
        /// <remarks/>
        ProblemRemovingToken,
        
        /// <remarks/>
        NoMatchFoundDB,
        
        /// <remarks/>
        FailToRegister,
        
        /// <remarks/>
        FailToDelete,
        
        /// <remarks/>
        FailToGenrateKey,
        
        /// <remarks/>
        FailToImport,
        
        /// <remarks/>
        FailToExport,
        
        /// <remarks/>
        FailToGetDefaultPassword,
        
        /// <remarks/>
        LicenseHasExpired,
        
        /// <remarks/>
        FacilityNotAssociated,
        
        /// <remarks/>
        InvalidRecordSignature,
        
        /// <remarks/>
        InvalidLicenseSignature,
        
        /// <remarks/>
        FailToGenerateIdnFile,
        
        /// <remarks/>
        EICConfiguredToDifferentUser,
        
        /// <remarks/>
        DiffrentEICConfiguredToThisUser,
        
        /// <remarks/>
        FailToSetPermissionAndCategory,
        
        /// <remarks/>
        UserIdAlreadyExsist,
        
        /// <remarks/>
        SSNAlreadyExsist,
        
        /// <remarks/>
        UserIdNotActive,
        
        /// <remarks/>
        NotEnoughSpace,
        
        /// <remarks/>
        FailToPublish,
        
        /// <remarks/>
        AlreadyPublish,
        
        /// <remarks/>
        FacilityInfoUpdationFail,
        
        /// <remarks/>
        InvalidEicHandle,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPatientAttachmentCompletedEventHandler(object sender, GetPatientAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSharedAttachmentCompletedEventHandler(object sender, GetSharedAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSharedAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSharedAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSharedWithByIdCompletedEventHandler(object sender, GetSharedWithByIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSharedWithByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSharedWithByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ValidateUserForDocumentViewCompletedEventHandler(object sender, ValidateUserForDocumentViewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateUserForDocumentViewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateUserForDocumentViewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RemoveShareCompletedEventHandler(object sender, RemoveShareCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RemoveShareCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RemoveShareCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LoginCompletedEventHandler(object sender, LoginCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void LogoutCompletedEventHandler(object sender, LogoutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LogoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal LogoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ErrorCode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllUserInfoCompletedEventHandler(object sender, GetAllUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetSpecificPatientConstentCompletedEventHandler(object sender, GetSpecificPatientConstentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSpecificPatientConstentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSpecificPatientConstentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateUserInfoCompletedEventHandler(object sender, UpdateUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePatientConsentInfoCompletedEventHandler(object sender, UpdatePatientConsentInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePatientConsentInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePatientConsentInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserMPIIDByUserIDCompletedEventHandler(object sender, GetUserMPIIDByUserIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserMPIIDByUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserMPIIDByUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPatientConstentCompletedEventHandler(object sender, GetPatientConstentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientConstentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientConstentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void FillListBoxCompletedEventHandler(object sender, FillListBoxCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillListBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillListBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserGUIDByUserIDCompletedEventHandler(object sender, GetUserGUIDByUserIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserGUIDByUserIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserGUIDByUserIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCommnIdByPatientIdCompletedEventHandler(object sender, GetCommnIdByPatientIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCommnIdByPatientIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCommnIdByPatientIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDocIdPostFixCompletedEventHandler(object sender, GetDocIdPostFixCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocIdPostFixCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocIdPostFixCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateDocPostFixCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetConfigurationUserCompletedEventHandler(object sender, GetConfigurationUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConfigurationUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConfigurationUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetConfigurationFacilityInfoCompletedEventHandler(object sender, GetConfigurationFacilityInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetConfigurationFacilityInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetConfigurationFacilityInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetRootCAKeyCompletedEventHandler(object sender, GetRootCAKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRootCAKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRootCAKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDistinctUserInfoCompletedEventHandler(object sender, GetDistinctUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDistinctUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDistinctUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCurrentFacilityInfoCompletedEventHandler(object sender, GetCurrentFacilityInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentFacilityInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentFacilityInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserInfoCompletedEventHandler(object sender, GetUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUsersGroupCompletedEventHandler(object sender, GetUsersGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUsersGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUsersGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateUserCompletedEventHandler(object sender, CreateUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int CheckuserId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDefaultPasswordCompletedEventHandler(object sender, GetDefaultPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDefaultPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDefaultPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetDefaultPasswordCompletedEventHandler(object sender, SetDefaultPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetDefaultPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetDefaultPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteUserCompletedEventHandler(object sender, DeleteUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExecuteSqlCompletedEventHandler(object sender, ExecuteSqlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExecuteSqlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExecuteSqlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckUserIdCompletedEventHandler(object sender, CheckUserIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUserIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUserIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int checkUserId1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckUniqueSSNCompletedEventHandler(object sender, CheckUniqueSSNCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckUniqueSSNCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckUniqueSSNCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckValidUserTypeCompletedEventHandler(object sender, CheckValidUserTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckValidUserTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckValidUserTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFacilityNameCompletedEventHandler(object sender, GetFacilityNameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacilityNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacilityNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ExportUserListCompletedEventHandler(object sender, ExportUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ExportUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ImportUserListCompletedEventHandler(object sender, ImportUserListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportUserListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportUserListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int checkUserId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchUserInfoCompletedEventHandler(object sender, SearchUserInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchUserInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchUserInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllRoleInfoCompletedEventHandler(object sender, GetAllRoleInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllRoleInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllRoleInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchRoleInfoCompletedEventHandler(object sender, SearchRoleInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchRoleInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchRoleInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreateRoleCompletedEventHandler(object sender, CreateRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteRoleCompletedEventHandler(object sender, DeleteRoleCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllPermissionsCompletedEventHandler(object sender, GetAllPermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAssociatePermissionsCompletedEventHandler(object sender, GetAssociatePermissionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssociatePermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssociatePermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPermissionCategoryOfAssociatedFacilityCompletedEventHandler(object sender, GetPermissionCategoryOfAssociatedFacilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPermissionCategoryOfAssociatedFacilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPermissionCategoryOfAssociatedFacilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCategoryInfoCompletedEventHandler(object sender, GetCategoryInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategoryInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCategoryInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SetPermissionsAndCategoryCompletedEventHandler(object sender, SetPermissionsAndCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SetPermissionsAndCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SetPermissionsAndCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdatePatientConsentPolicyCompletedEventHandler(object sender, UpdatePatientConsentPolicyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdatePatientConsentPolicyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdatePatientConsentPolicyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int ConsentId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchPermissionInfoCompletedEventHandler(object sender, SearchPermissionInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchPermissionInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchPermissionInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CreatePermissionCompletedEventHandler(object sender, CreatePermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreatePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeletePermissionCompletedEventHandler(object sender, DeletePermissionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeletePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllServInfoCompletedEventHandler(object sender, GetAllServInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllServInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllServInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFacilityInfoPublishCompletedEventHandler(object sender, GetFacilityInfoPublishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacilityInfoPublishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacilityInfoPublishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFacilityInfoDetailsCompletedEventHandler(object sender, GetFacilityInfoDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacilityInfoDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacilityInfoDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UpdateFacilityInfoCompletedEventHandler(object sender, UpdateFacilityInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateFacilityInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateFacilityInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RegisterServerCompletedEventHandler(object sender, RegisterServerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterServerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterServerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAllEicInfoCompletedEventHandler(object sender, GetAllEicInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllEicInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllEicInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SearchEicInfoCompletedEventHandler(object sender, SearchEicInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SearchEicInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SearchEicInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void RegisterEicCompletedEventHandler(object sender, RegisterEicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RegisterEicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RegisterEicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int checkSerialId {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckPatientConsentPolicyExistenceCompletedEventHandler(object sender, CheckPatientConsentPolicyExistenceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckPatientConsentPolicyExistenceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckPatientConsentPolicyExistenceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int checkConsentExistence {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteEicCompletedEventHandler(object sender, DeleteEicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteEicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteEicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CheckRegisterEICCompletedEventHandler(object sender, CheckRegisterEICCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckRegisterEICCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckRegisterEICCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void FillDropDownCompletedEventHandler(object sender, FillDropDownCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FillDropDownCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FillDropDownCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetFacilityInfoCompletedEventHandler(object sender, GetFacilityInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFacilityInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFacilityInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPatient911XmlCompletedEventHandler(object sender, GetPatient911XmlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatient911XmlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatient911XmlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetAssociatedFacilityInfoCompletedEventHandler(object sender, GetAssociatedFacilityInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAssociatedFacilityInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAssociatedFacilityInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteDocumentByPatientIdCompletedEventHandler(object sender, DeleteDocumentByPatientIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteDocumentByPatientIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteDocumentByPatientIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteSharingByPatientIdCompletedEventHandler(object sender, DeleteSharingByPatientIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSharingByPatientIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSharingByPatientIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void FacilityAssociateCompletedEventHandler(object sender, FacilityAssociateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FacilityAssociateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FacilityAssociateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DissociateFacilityCompletedEventHandler(object sender, DissociateFacilityCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DissociateFacilityCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DissociateFacilityCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void CategoryAssociationCompletedEventHandler(object sender, CategoryAssociationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CategoryAssociationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CategoryAssociationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetPatientInfoCompletedEventHandler(object sender, GetPatientInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPatientInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPatientInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDeviceInfoCompletedEventHandler(object sender, GetDeviceInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeviceInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDeviceInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string serverPubKey {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void VerifyEicCompletedEventHandler(object sender, VerifyEicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyEicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyEicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void UnRegisterEicCompletedEventHandler(object sender, UnRegisterEicCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UnRegisterEicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UnRegisterEicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetServerKeyCompletedEventHandler(object sender, GetServerKeyCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServerKeyCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServerKeyCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Get911DataTypeCompletedEventHandler(object sender, Get911DataTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get911DataTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get911DataTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Get911FieldsCompletedEventHandler(object sender, Get911FieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get911FieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get911FieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Get911CategoryCompletedEventHandler(object sender, Get911CategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Get911CategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Get911CategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetCategoryField911CompletedEventHandler(object sender, GetCategoryField911CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCategoryField911CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCategoryField911CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddCategoryField911CompletedEventHandler(object sender, AddCategoryField911CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCategoryField911CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCategoryField911CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void DeleteCategoryField911CompletedEventHandler(object sender, DeleteCategoryField911CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCategoryField911CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteCategoryField911CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Update911FieldsCompletedEventHandler(object sender, Update911FieldsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update911FieldsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update911FieldsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ErrorCode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void Update911CategoryCompletedEventHandler(object sender, Update911CategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Update911CategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal Update911CategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ErrorCode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetUserInformation911CompletedEventHandler(object sender, GetUserInformation911CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserInformation911CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserInformation911CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddInformation911CompletedEventHandler(object sender, AddInformation911CompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddInformation911CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddInformation911CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void SaveC32DocumentCompletedEventHandler(object sender, SaveC32DocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveC32DocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveC32DocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void AddAttachmentCompletedEventHandler(object sender, AddAttachmentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddAttachmentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddAttachmentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void ShareToNewProviderCompletedEventHandler(object sender, ShareToNewProviderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ShareToNewProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ShareToNewProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void GetDocumentByPatientIdCompletedEventHandler(object sender, GetDocumentByPatientIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDocumentByPatientIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDocumentByPatientIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ErrorCode errorCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ErrorCode)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591