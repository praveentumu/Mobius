//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.586
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.586.
// 
#pragma warning disable 1591

namespace MobiusCorrelation
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Xml.Serialization;
    using Mobius.CoreLibrary;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "MobiusPatientCorrelationPortBinding", Namespace = "http://patientcorrelation.adapter.firstgenesis.com/")]
    public partial class MobiusPatientCorrelation : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback getCorrelatedPatientsOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public MobiusPatientCorrelation()
        {
            this.Url = MobiusAppSettingReader.MobiusPatientCorrelation;
            this.Timeout = MobiusAppSettingReader.ConnectGatewayTimeOut;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event getCorrelatedPatientsCompletedEventHandler getCorrelatedPatientsCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace = "http://patientcorrelation.adapter.firstgenesis.com/", ResponseNamespace = "http://patientcorrelation.adapter.firstgenesis.com/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public qualifiedPatientIdentifier[] getCorrelatedPatients([System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string assigningAuthorityId, [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)] string patientId)
        {
            object[] results = this.Invoke("getCorrelatedPatients", new object[] {
                        assigningAuthorityId,
                        patientId});
            return ((qualifiedPatientIdentifier[])(results[0]));
        }

        /// <remarks/>
        public void getCorrelatedPatientsAsync(string assigningAuthorityId, string patientId)
        {
            this.getCorrelatedPatientsAsync(assigningAuthorityId, patientId, null);
        }

        /// <remarks/>
        public void getCorrelatedPatientsAsync(string assigningAuthorityId, string patientId, object userState)
        {
            if ((this.getCorrelatedPatientsOperationCompleted == null))
            {
                this.getCorrelatedPatientsOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCorrelatedPatientsOperationCompleted);
            }
            this.InvokeAsync("getCorrelatedPatients", new object[] {
                        assigningAuthorityId,
                        patientId}, this.getCorrelatedPatientsOperationCompleted, userState);
        }

        private void OngetCorrelatedPatientsOperationCompleted(object arg)
        {
            if ((this.getCorrelatedPatientsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCorrelatedPatientsCompleted(this, new getCorrelatedPatientsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.450")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://patientcorrelation.adapter.firstgenesis.com/")]
    public partial class qualifiedPatientIdentifier
    {

        private string assigningAuthorityIdField;

        private string patientIdField;

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string assigningAuthorityId
        {
            get
            {
                return this.assigningAuthorityIdField;
            }
            set
            {
                this.assigningAuthorityIdField = value;
            }
        }

        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form = System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string patientId
        {
            get
            {
                return this.patientIdField;
            }
            set
            {
                this.patientIdField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void getCorrelatedPatientsCompletedEventHandler(object sender, getCorrelatedPatientsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCorrelatedPatientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal getCorrelatedPatientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public qualifiedPatientIdentifier[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((qualifiedPatientIdentifier[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591